%% Pretty printing table (see also Lua.generated.pp)
[
   Chunk                            -- _1 _2,
   Chunk.1:iter-star                -- _1,
   Chunk                            -- _1,
   Chunk.1:iter-star                -- _1,
   Assignment                       -- H[ _1 KW["="] _2 ],
   Assignment.1:iter-sep            -- _1 KW[","],
   Assignment.2:iter-sep            -- _1 KW[","],
   DoWhile                          -- KW["do"] _1 KW["end"],
   While                            -- KW["while"] _1 KW["do"] _2 KW["end"],
   Repeat                           -- KW["repeat"] _1 KW["until"] _2,
   ElseIfPart                       -- KW["elseif"] _1 KW["then"] _2,
   If                               -- KW["if"] _1 KW["then"] _2 KW["end"],
   If                               -- KW["if"] _1 KW["then"] _2 KW["else"] _3 KW["end"],
   If                               -- KW["if"] _1 KW["then"] _2 _3 KW["end"],
   If.3:iter                        -- _1,
   If                               -- KW["if"] _1 KW["then"] _2 _3 KW["else"] _4 KW["end"],
   If.3:iter                        -- _1,
   ExpPart                          -- KW[","] _1,
   For                              -- KW["for"] _1 KW["="] _2 KW[","] _3 _4 KW["do"] _5 KW["end"],
   For.4:opt                        -- _1,
   ForIn                            -- KW["for"] _1 KW["in"] _2 KW["do"] _3 KW["end"],
   ForIn.1:iter-sep                 -- _1 KW[","],
   ForIn.2:iter-sep                 -- _1 KW[","],
   FuncDef                          -- KW["function"] _1 _2,
   LocalFuncDef                     -- KW["local"] KW["function"] _1 _2,
   LocalVarDef                      -- V  [H  [KW["local"]] _1],
   LocalVarDef.1:iter-sep           -- _1 KW[","],
   LocalVarDef                      -- KW["local"] _1 KW["="] _2,
   LocalVarDef.1:iter-sep           -- _1 KW[","],
   LocalVarDef.2:iter-sep           -- _1 KW[","],
   Return                           -- KW["return"],
   Return                           -- V  [H  [KW["return"]] _1],
   Return.1:iter-sep                -- _1 KW[","],
   Break                            -- KW["break"],
   DotIdPart                        -- KW["."] _1,
   FunctionName                     -- _1,
   FunctionName                     -- H hs=0[ _1 KW[":"] _2 ],
   FunctionName                     -- _1 _2,
   FunctionName.2:iter              -- _1,
   FunctionName                     -- H hs=0[ _1 _2 KW[":"] _3 ],
   FunctionName.2:iter              -- _1,
   Call                             -- _1 _2,
   Call                             -- H hs=0[ _1 KW[":"] _2 _3 ],
   FunctionBody                     -- V[ H hs=0[ KW["("] _1 KW[")"] ] _2 KW["end"] ],
   Args                             -- KW["("] _1 KW[")"],
   Args.1:iter-star-sep             -- _1 KW[", "],
   VarRef                           -- _1,
   TableVarRef                      -- _1 KW["["] _2 KW["]"],
   Access                           -- H hs=0[ _1 KW["."] _2 ],
   Field                            -- KW["["] _1 KW["]"] KW["="] _2,
   Field                            -- _1 KW["="] _2,
   Field                            -- _1,
   Table                            -- KW["{"] KW["}"],
   Table                            -- KW["{"] _1 KW["}"],
   Table                            -- KW["{"] _1 KW["}"],
   Table.1:iter-sep                 -- _1 KW[","],
   Table                            -- KW["{"] _1 KW["}"],
   Table.1:iter-sep                 -- _1 KW[";"],
   Nil                              -- KW["nil"],
   False                            -- KW["false"],
   True                             -- KW["true"],
   Number                           -- _1,
   Number                           -- _1,
   String                           -- _1,
   Nothing                          -- KW["..."],
   Function                         -- KW["function"] _1,
   Not                              -- KW["not"] _1,
   Umin                             -- KW["-"] _1,
   Hash                             -- KW["#"] _1,
   Add                              -- _1 KW["+"] _2,
   Sub                              -- _1 KW["-"] _2,
   Mul                              -- _1 KW["*"] _2,
   Div                              -- _1 KW["/"] _2,
   Mod                              -- _1 KW["%"] _2,
   Pow                              -- _1 KW["^"] _2,
   Concat                           -- _1 KW[".."] _2,
   Eq                               -- _1 KW["=="] _2,
   Neq                              -- _1 KW["~="] _2,
   Lt                               -- _1 KW["<"] _2,
   Lte                              -- _1 KW["<="] _2,
   Gt                               -- _1 KW[">"] _2,
   Gte                              -- _1 KW[">="] _2,
   And                              -- _1 KW["and"] _2,
   Or                               -- _1 KW["or"] _2,
   VaradicParList                   -- KW["..."],
   PartialVaradicParList            -- _1 KW[","] KW["..."],
   PartialVaradicParList.1:iter-sep -- _1 KW[","],
   ParList                          -- _1,
   ParList.1:iter-sep               -- _1 KW[","],
   ParList                          -- 
]
