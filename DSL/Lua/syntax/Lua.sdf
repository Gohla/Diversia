%% Grammar for the Lua language
%% By default, based on an example "entities" syntax
module Lua

imports Lexical

exports

  context-free start-symbols
    Start

  context-free syntax
  
    %% Chunk
    StatementClosure* LastStatementClosure -> Chunk {cons("Chunk")}
    StatementClosure* -> Chunk {cons("Chunk")}
    Chunk -> Start
    Chunk -> Block
    
    %% Statement
    VarRefList "=" ExpList -> Statement {cons("Assignment")}
    FunctionCall -> Statement {cons("Call")}
	"do" Block "end" -> Statement {cons("DoWhile")}
	"while" Exp "do" Block "end" -> Statement {cons("While")}
	"repeat" Block "until" Exp -> Statement {cons("Repeat")}
	"elseif" Exp "then" Block -> ElseIfPart {cons("ElseIfPart")}
	"if" Exp "then" Block "end" -> Statement {cons("If")}
	"if" Exp "then" Block "else" Block "end" -> Statement {cons("If")}
	"if" Exp "then" Block ElseIfPart+ "end" -> Statement {cons("If")}
	"if" Exp "then" Block ElseIfPart+ "else" Block "end" -> Statement {cons("If")}
	"," Exp -> ExpPart {cons("ExpPart")}
	"for" Id "=" Exp "," Exp ExpPart? "do" Block "end" -> Statement {cons("For")}
	"for" IdList "in" ExpList "do" Block "end" -> Statement {cons("ForIn")}
	"function" FunctionName FunctionBody -> Statement {cons("Function")}
	"local" "function" Id FunctionBody -> Statement {cons("LocalFunction")}
	"local" IdList -> Statement {cons("LocalVariable")}
	"local" IdList "=" ExpList -> Statement {cons("LocalVariableInit")}
	Statement -> StatementClosure
    Statement ";" -> StatementClosure
    
	%% Last statement
	"return" -> LastStatement {cons("Return")}
	"return" ExpList -> LastStatement {cons("ReturnExp")}
	"break" -> LastStatement {cons("Break")}
	LastStatement -> LastStatementClosure
    LastStatement ";" -> LastStatementClosure
    
    %% Function
    "." Id -> DotIdPart {cons("DotIdPart")}
    ":" Id -> ColonIdPart {cons("ColonIdPart")}
    Id DotIdPart* ColonIdPart? -> FunctionName {cons("FunctionName")}
    PrefixExp Args -> FunctionCall
    PrefixExp ":" Id Args -> FunctionCall
    "function" FunctionBody -> Function
    "(" ParList ")" Block "end" -> FunctionBody {cons("FunctionBody")}
    
    %% Args
    "(" ExpListOptional ")" -> Args
    TableConstructor -> Args
    StrConst -> Args
    
    %% Variable
    Id -> VarRef {cons("VarRef")}
    PrefixExp "[" Exp "]" -> VarRef {cons("TableVarRef")}
    PrefixExp "." Id -> VarRef {cons("AccessVarRef")}
    
    %% Field
    "[" Exp "]" "=" Exp -> Field
    Id "=" Exp -> Field
    Exp -> Field
    "," -> FieldSep
    ";" -> FieldSep
    "{" FieldList "}" -> TableConstructor
    
    %% Expression
	"nil" -> Exp {cons("nil")}
	"false" -> Exp {cons("False")}
	"true" -> Exp {cons("True")}
	IntConst -> Exp {cons("Number")}
	FloatConst -> Exp {cons("Number")}
	StrConst -> Exp {cons("String")}
	"..." -> Exp {cons("Nothing")}
	Function -> Exp {cons("Function")}
	PrefixExp -> Exp
	TableConstructor -> Exp {cons("TableConstructor")}
	
	%% Prefix expression
	VarRef -> PrefixExp
	FunctionCall -> PrefixExp {cons("FunctionCallPrefix")}
	"(" Exp ")" -> PrefixExp {bracket}
	
	%% Operators
    "not" Exp       -> Exp {cons("Not"), left}
    "-" Exp 		-> Exp {cons("Umin"), left}
    "#" Exp 		-> Exp {cons("Hash"), left}
    Exp "+" Exp     -> Exp {cons("Add"), left}
    Exp "-" Exp     -> Exp {cons("Sub"), left}
    Exp "*" Exp     -> Exp {cons("Mul"), left}
    Exp "/" Exp     -> Exp {cons("Div"), left}
    Exp "%" Exp     -> Exp {cons("Mod"), left}
    Exp "^" Exp     -> Exp {cons("Pow"), right}
    Exp ".." Exp    -> Exp {cons("Concat"), right}
    Exp "==" Exp    -> Exp {cons("Eq"), left}
    Exp "~=" Exp    -> Exp {cons("Neq"), left}
    Exp "<" Exp     -> Exp {cons("Lt"), left}
    Exp "<=" Exp    -> Exp {cons("Lte"), left}
    Exp ">" Exp     -> Exp {cons("Gt"), left}
    Exp ">=" Exp    -> Exp {cons("Gte"), left}
    Exp "and" Exp   -> Exp {cons("And"), left}
    Exp "or" Exp    -> Exp {cons("Or"), left}
	
	%% Lists
	{Exp ","}+ -> ExpList
	{Exp ","}* -> ExpListOptional
	{VarRef ","}+ -> VarRefList
	{VarRef ","}* -> VarRefListOptional
	{Id ","}+ -> IdList
	{Id ","}* -> IdListOptional
	"..." -> ParList {cons("VaradicParList")}
	IdList "," "..." -> ParList {cons("PartialVaradicParList")}
	IdList -> ParList {cons("ParList")}
	-> ParList {cons("ParList")}
	{Field FieldSep}* -> FieldList
	
    context-free priorities
    %% Operators, following the operator predecence from: http://www.uni-bonn.de/~manfear/javaoperators.php
    {
    	right:
    	Exp "^" Exp -> Exp
	}
    >
    {
    	left:
	    "not" Exp -> Exp
	    "-" Exp -> Exp
	    "#" Exp -> Exp
    }
    >
    {
        left:
        Exp "*" Exp -> Exp
        Exp "/" Exp -> Exp
        Exp "%" Exp -> Exp
    } 
    > 
    {
        left: 
        Exp "+" Exp -> Exp
        Exp "-" Exp -> Exp
    }
    >
    {
    	right:
    	Exp ".." Exp -> Exp
	}
    >
    {
        left:
        Exp "==" Exp -> Exp
        Exp "!=" Exp -> Exp
        Exp "<" Exp -> Exp
        Exp "<=" Exp -> Exp
        Exp ">" Exp -> Exp
        Exp ">=" Exp -> Exp
    }
    >
    {
        left:
        Exp "and" Exp -> Exp
    }
    >
    {
        left:
        Exp "or" Exp -> Exp
    }