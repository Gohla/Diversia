regular tree grammar
  start Start
  productions
    ListStarOfProperty0   -> ListPlusOfProperty0
    ListStarOfProperty0   -> <nil>()
    ListStarOfProperty0   -> <conc>(ListStarOfProperty0,ListStarOfProperty0)
    ListPlusOfProperty0   -> <conc>(ListStarOfProperty0,ListPlusOfProperty0)
    ListPlusOfProperty0   -> <conc>(ListPlusOfProperty0,ListStarOfProperty0)
    ListPlusOfProperty0   -> <conc>(ListPlusOfProperty0,ListPlusOfProperty0)
    ListPlusOfProperty0   -> <cons>(Property,ListStarOfProperty0)
    ListStarOfDefinition0 -> ListPlusOfDefinition0
    ListStarOfDefinition0 -> <nil>()
    ListStarOfDefinition0 -> <conc>(ListStarOfDefinition0,ListStarOfDefinition0)
    ListPlusOfDefinition0 -> <conc>(ListStarOfDefinition0,ListPlusOfDefinition0)
    ListPlusOfDefinition0 -> <conc>(ListPlusOfDefinition0,ListStarOfDefinition0)
    ListPlusOfDefinition0 -> <conc>(ListPlusOfDefinition0,ListPlusOfDefinition0)
    ListPlusOfDefinition0 -> <cons>(Definition,ListStarOfDefinition0)
    ListStarOfStringChar0 -> <string>
    ListPlusOfStringChar0 -> <string>
    OptLit0               -> <string>
    Type                  -> Type(ID)
    Property              -> Property(ID,Type)
    Definition            -> Entity(ID,ListStarOfProperty0)
    Start                 -> Module(ID,ListStarOfDefinition0)
    EOF                   -> <string>
    CommentChar           -> <string>
    BackSlashChar         -> <string>
    StringChar            -> <string>
    STRING                -> <string>
    INT                   -> <string>
    ID                    -> <string>
