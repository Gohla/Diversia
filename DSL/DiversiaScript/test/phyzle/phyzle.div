import orbitcam
import floor

plugin SceneManager {
	SkyMaterial = "SpaceSkyBox"
	SkyType = SkyType.Box
	SkyEnabled = true
	SkyDrawFirst = true
	AmbientLight = Colour(0.23, 0.2, 0.3, 1)
}

// Ball object definition
def Ball {
	Runtime = true
	
    // Ball components
    component Mesh { 							// Visual representation of the ball.
        ShapeType = GraphicsShape.Sphere      	// Sphere is a predefined shape type.
        ShapeUV = [1, 2]        				// Vector with 2 elements.
        ShapeXSegments = 40
        ShapeRadius = 0.3
    }
    component Entity { 							// Entity that makes the mesh visible.
        Material = "Ball"
    }
    component CollisionShape { 					// Sphere collision shape
        ShapeType = PhysicsShape.Sphere
        ShapeParameters = [0.3, 1, 1]
    }
    component RigidBody { 						// Rigid body physics
        PhysicsType = PhysicsType.Dynamic
        Restitution = 0.3
        LinearDampening = 0.7
        AngularDampening = 0.7
    }
    
	prop Speed : Int = 10
	prop Camera : Object

    default state Alive {
        var mMove : Int = 0
        var mStrafe : Int = 0
        var mSpeedMultiplier : Int = 1
        
        on KeyPressed(Key : KeyboardButton, KeyCode : Int) {
            switch(Key) {
                case KeyboardButton.W: ++mMove;
                case KeyboardButton.S: --mMove;
                case KeyboardButton.A: ++mStrafe;
                case KeyboardButton.D: --mStrafe;
                case KeyboardButton.LSHIFT: mSpeedMultiplier = 2;
            }
        }
        on KeyReleased(Key : KeyboardButton, KeyCode : Int) {
            switch(Key) {
                case KeyboardButton.W: --mMove;
                case KeyboardButton.S: ++mMove;
                case KeyboardButton.A: --mStrafe;
                case KeyboardButton.D: ++mStrafe;
                case KeyboardButton.LSHIFT: mSpeedMultiplier = 1;
            }
        }
        on Update() {
            // Cap values
            if(mMove < -1)          mMove = -1;
            else if(mMove > 1)      mMove = 1;
            if(mStrafe < -1)        mStrafe = -1;
            else if(mStrafe > 1)    mStrafe = 1;
            
            // Move the ball forwards or backwards
            if(mMove != 0) {
                RigidBody.ApplyCentralForce(Camera.DerivedOrientation * [0, 0, Speed * -mMove * mSpeedMultiplier]);
            }
            
            // Move the ball sideways
            if(mStrafe != 0) {
                RigidBody.ApplyCentralForce(Camera.DerivedOrientation * [Speed * -mStrafe * mSpeedMultiplier, 0, 0]);
            }
        }
    }
    state Dead {
        // Do nothing
    }
}

// Global event, the 'main' function
on Create() {
    var Ball : Ball = new Ball {
        Position = [0, 50, -50]
        Speed = 10
    };
	var OrbitCamera : OrbitCamera = new OrbitCamera { 
		MouseRotation = 0.25
		Target = Ball
	};
	Ball.Camera = OrbitCamera;
}