// Camera object definition
def CameraYaw {
    Position = [0, 0.5, 0] // Standard position offset

    // Child objects
    def CameraPitch {
        def Camera {
            Position = [0, 0, 5]
            component Camera {
                Active = true
            }
        }
    }

    // Variable definitions
    var mRMB = false;
    var mMouseState : MouseState = null;
    
    // States
    default state Alive {
        // Events
        on MousePressed(Button) {
            if(Button == Right) mRMB = true;
        }
        on MouseReleased(Button) {
            if(Button == Right) mRMB = false;
        }
        on MouseMoved(State) {
            mMouseState = MouseState(State);
        }
        on Update() {
            if(mRMB) { // If right mouse button is pressed
                // Yaw the camera
                this.Yaw(Radian(Degree(-mMouseState.X.Relative)));

                // Pitch the camera
                var Pitch = CameraPitch.Orientation.Pitch;
                var DegreeChange = Degree(-mMouseState.Y.Relative);
                var NewPitch = DegreeChange + Pitch;
                if(NewPitch < Degree(85) && NewPitch > Degree(-85)) {
                    CameraPitch.Pitch(Radian(DegreeChange));
                }
            }
            if(mMouseState != null) {
                // Camera distance
                var Distance = CameraPitch.Camera.Position.Z;
                if(mMouseState.Z.Relative > 0) {
                     Distance = Distance - Distance / 12;
                     if(Distance < 5) Distance = 5;
                }
                else if(mMouseState.Z.Relative < 0) {
                     Distance = Distance + Distance / 12;
                     if(Distance > 50) Distance = 50;
                }
                CameraPitch.Camera.Position = [0, 0, Distance];
                
                // Clear mouse state
                mMouseState.Clear();
            }
        }
    }
    state Dead {
        // Do nothing
    }
}

// Ball object definition
def Ball {
    // Ball components
    component Mesh { // Visual representation of the ball.
        ShapeType = Sphere      // Sphere is a predefined shape type.
        ShapeUV = [1, 2]        // Vector with 2 elements.
        ShapeXSegments = 40
        ShapeRadius = 0.3
    }
    component Entity { // Entity that makes the mesh visible.
        Material = "Ball"
    }
    component CollisionShape { // Sphere collision shape
        ShapeType = Sphere
        ShapeParameters = [0.3, 1, 1]
    }
    component RigidBody { // Rigid body physics
        PhysicsType = Dynamic
        Restitution = 0.3
        LinearDampening = 0.7
        AngularDampening = 0.7
    }
    
    // Child objects
    external def CameraYaw // Add the CameraYaw object definition as a child object.

    default state Alive {
        var mMove = 0;
        var mStrafe = 0;
        var mSpeedMultiplier = 1;
        
        on KeyPressed(Key) {
            switch(key) {
                case W: ++mMove;
                case S: --mMove;
                case A: ++Strafe;
                case D: --Strafe;
                case Shift: mSpeedMultiplier = 2;
            }
        }
        on KeyReleased(Key) {
            switch(key) {
                case W: --mMove;
                case S: ++mMove;
                case A: --Strafe;
                case D: ++Strafe;
                case Shift: mSpeedMultiplier = 1;
            }
        }
        on Frame(TimeSinceLastFrame) {
            // Cap values
            if(mMove < -1)          mMove = -1;
            else if(mMove > 1)      mMove = 1;
            if(mStrafe < -1)        mStrafe = -1;
            else if(mStrafe > 1)    mStrafe = 1;
            
            // Move the ball forwards or backwards
            if(mMove != 0) {
                RigidBody.ApplyCentralForce(CameraYaw.DerivedOrientation * [0, 0, -mMove * mSpeedMultiplier]);
            }
            
            // Move the ball sideways
            if(State.Strafe != 0) {
                RigidBody.ApplyCentralForce(CameraYaw.DerivedOrientation * [-mStrafe * mSpeedMultiplier, 0, 0]);
            }
        }
        on LateUpdate() {
            // Move camera to the ball
            CameraYaw.Position = this.Position;
        }
        on Collision(OtherObject) {
            // Transition to Dead state if a mine is hit.
            if(OtherObject.DefinitionName == "Mine") setstate Dead;
        }
    }
    state Dead {
        // Do nothing
    }
}

// Landmine object definition
def Mine {
    component Mesh {
        ShapeType = Mesh
        ShapeFile = "Landmine.mesh"
    }
    component Entity {
        Material = "Landmine"
    }
    component CollisionShape {
        ShapeType = Mesh
        ShapeFile = "Landmine.bullet"
    }
    component RigidBody {
        PhysicsType = Dynamic
        Restitution = 0.3
        LinearDampening = 0.7
        AngularDampening = 0.7
    }
    
    default state Armed {
        on Collision(OtherObject: Object) {
            // Explode mine if another object hits this.
            setstate Exploding;
        }
    }
    state Exploding {
        component Particles {
            Template = "Explosion.particle"
            Active = true
        }
        component Sound {
            SoundFile = "Explosion.ogg"
            AutoPlay = true
        }
        
        on StateEnter { // Event is fired after state is entered.
            // Destroy this object after 2 seconds of explosion.
            in 2 seconds {
                this.Destroy();
            }
            interpolate Particles.Speed linearly from 5.0 to 1.0 over 2 seconds; 
        }
    }
}

def Floor {
    component Mesh {
        ShapeType = Plane
        ShapeParameters = [1000, 1000, 1]
        ShapeUV = [1000, 1000]
        ShapeXSegments = 50
        ShapeYSegments = 50
    }
    component Entity {
        Material = "Floor"
    }
    component CollisionShape {
        ShapeType = Plane
        ShapeParameters = [1000, 1000, 1]
    }
    component RigidBody {
        PhysicsType = Static
        Restitution = 0.3
    }
}

// Global event, the 'main' function
on Create() {
    // Create an object of type Floor at position 0, 0, 0.
    new Floor {
        Position = [0, 0, 0]
    }
    new Ball {
        Position = [0, 10, 0]
    }
    new Mine {
        Position = [0, 10, 10]
    }
}