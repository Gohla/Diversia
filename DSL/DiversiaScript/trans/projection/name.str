module projection/name

imports
	include/DiversiaScript
	lib/namespaces
	
	signatures
	namespace
	
	data/events
	
rules // Name-based projections  //TODO need to check these
	
	get-name: ObjectDef(n, _, _, _, _, _, _, _, _) -> n //pre desugar
	get-name: ObjectDef(n, _, _, _, _, _, _, _) -> n  //post desugar
	get-name: PropDef(_, n, _, _) -> n
	get-name: ComponentDef(n, _, _) -> n
	get-name: VarDef(_, n, _, _) -> n
	get-name: EventDef(n, _, _) -> n
	get-name: StateDef(n, _) -> n
	get-name: CustomType(n) -> n
	
	get-proposal: ObjectDef(name, _, _, _, _, _, _, _) -> (name, $[[name] : ClientObject])
	get-proposal: PropDef(_, name, _, _)  -> (name, $[[name] : Type  info ])
	
	has-name(|name) = ?ObjectDef(name, _, _, _, _, _, _, _, _)
	has-name(|name) = ?PropDef(_, name, _, _)
		
rules // Name-based look-up transformations
	
	is-object-property(|object, property) = <get-object-property> (object, property)
	get-object-property: (object, name) -> <get-prop> (object, name)
			
	get-all-objects = get-all-declarations(|Objects())
	get-all-components: objectName -> <get-all-declarations(|Components(objectName))>
	get-all-components: (objectName, stateName) -> <get-all-declarations(|Components(objectName, stateName))>
	get-all-vars: objectName -> <get-all-declarations(|Vars(objectName))>
	get-all-events = get-all-declarations(|Events())
	get-all-events: objectName -> <get-all-declarations(|Events(objectName))>
	get-all-events: (objectName, stateName) -> <get-all-declarations(|Events(objectName, stateName))>
	get-all-properties: objectName -> <get-all-declarations(|Props(objectName))>
	get-all-objectevents: (objectName, eventName) -> <get-all-declarations(|ObjectEvents(objectName, eventName))>
	get-all-states: objectName -> <get-all-declarations(|States(objectName))>
	get-all-defaultstates: objectName -> <get-all-declarations(|DefaultStates(objectName))>
	
	get-object: objectName -> <get-declaration(|Objects())> objectName where not (<?CustomType(_)> objectName)
	get-object: CustomType(objectName) -> <get-declaration(|Objects())> objectName
	get-component: componentName -> <get-declaration(|Components())> componentName
	get-component: (objectName, componentName) -> <get-declaration(|Components(objectName))> componentName
	get-component: (objectName, stateName, componentName) -> <get-declaration(|Components(objectName, stateName))> componentName
	get-plugin: pluginName -> <get-declaration(|Plugins())> pluginName
	get-var: (objectName, varName) -> <get-declaration(|Vars(objectName))> varName
	get-prop: (objectName, propName) -> <get-declaration(|Props(objectName))> propName where not (<?CustomType(_)> objectName)
	get-prop: (CustomType(objectName), propName) -> <get-declaration(|Props(objectName))> propName
	get-var: varName -> <get-declaration(|Vars())> varName
	get-event: eventName -> <get-declaration(|Events())> eventName
	get-event: (objectName, eventName) -> <get-declaration(|Events(objectName))> eventName
	get-event: (objectName, stateName, eventName) -> <get-declaration(|Events(objectName, stateName))> eventName
	get-state: (objectName, stateName) -> <get-declaration(|States(objectName))> stateName
	get-defaultstate: (objectName, stateName) -> <get-declaration(|DefaultStates(objectName))> stateName
	get-state: stateName -> <get-declaration(|States())> stateName
	
	get-component(|objectName): componentName -> <get-declaration(|Components(objectName))> componentName
	get-component(|objectName, stateName): componentName -> <get-declaration(|Components(objectName, stateName))> componentName
	get-var(|objectName): varName -> <get-declaration(|Vars(objectName))> varName
	get-event(|objectName): eventName -> <get-declaration(|Events(objectName))> eventName
	get-event(|objectName, stateName): eventName -> <get-declaration(|Events(objectName, stateName))> eventName
	get-state(|objectName): stateName -> <get-declaration(|States(objectName))> stateName
	get-defaultstate(|objectName): stateName -> <get-declaration(|DefaultStates(objectName))> stateName
	
rules // Event
	
	object-events(|objectName): Event(name, _) -> <concat> [ [ ("", objectEvent) ], stateEvents ]
		where objectEvent := <get-event> (objectName, name)
		where stateEvents := <get-all-objectevents> (objectName, name)
	object-events(|objectName): Event(name, _) -> stateEvents
		where not (<get-event> (objectName, name))
		where stateEvents := <get-all-objectevents> (objectName, name)
		
rules // Vars
	
	object-vars: ObjectDef(_, _, propDefs, _, varDefs, defaultStateDef, stateDefs, _) -> 
		<concat> [propDefs, varDefs, <concat> <map(state-vars)> <concat> [defaultStateDef, stateDefs]]
	state-vars: StateDef(_, _, _, varDefs, _) -> varDefs
	state-vars: DefaultStateDef(_, _, _, varDefs, _) -> varDefs
	