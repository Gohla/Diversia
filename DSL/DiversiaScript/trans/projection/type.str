module projection/type

imports
	
	include/DiversiaScript
	
	signatures
	
	projection/name
	
	data/type
	data/type-base
	data/type-prop
	data/type-func
	data/type-op
	data/enum
	
rules // Utility
	
	printable = 
		switch ?input
		    case BoolType() : !"Boolean"
		    case IntType() : !"Int"
			case RealType() : !"Real"
			case StringType() : !"String"
			case VoidType() : !"Void"
			case NullType() : !"Void*"
			case CustomType(?name) : !$[[name]]
			case [?type|[]] : <printable> type
			case [?type|?types]; not (<?[]> types) : !$[[<printable> type], [<printable> types]] 
		    otherwise : <printable-specialised> input <+ ?name#(_); !$[[name]]
		end		
	
	printable-specialised: ADD() -> "+"
	printable-specialised: SUB() -> "-"
	printable-specialised: MUL() -> "*"
	printable-specialised: DIV() -> "/"
	printable-specialised: EQ() -> "=="
	printable-specialised: NEQ() -> "!="
	printable-specialised: LT() -> "<"
	printable-specialised: LTE() -> "<="
	printable-specialised: GT() -> ">"
	printable-specialised: GTE() -> ">="
	printable-specialised: AND() -> "&&"
	printable-specialised: OR() -> "||"
	printable-specialised: NOT() -> "!"
	printable-specialised: UMIN() -> "-"
	printable-specialised: UPLUS() -> "+"
	printable-specialised: PREINC() -> "--T"
	printable-specialised: POSTINC() -> "T--"
	printable-specialised: PREDEC() -> "++T"
	printable-specialised: POSTDEC() -> "T++"

rules // Type matching (compatibility)
	
	// Matches if types are the same or if the second type is a parent type of the first.
	match-type = ?(type1, type2); (<?type1> type2 <+ <get-type-parent> (type2, type1)) 
		
	// Matches reals and integers.
	match-type = ?(RealType(), IntType())
	match-type = ?(IntType(), RealType())
	
	// Matches everything with null.
	match-type = ?(_, NullType())
		
	// Matches lists of types.
	match-types = ?([], [])
	match-types = ?([var-type|rest1], [exp-type|rest2]); <match-type> (var-type, exp-type); <match-types> (rest1, rest2)

rules // Boolean conversion
	
	bool-convertable = ?BoolType()
	bool-convertable = ?IntType()
	bool-convertable = ?RealType()
	bool-convertable = ?NullType()

rules  // Expressions
	
	types-of : list -> <map(type-of)> list
	type-of = is-list; types-of
	
	type-of: BOp(_, _, _) -> BoolType()
	type-of: AOp(_, exp1, exp2) -> RealType()
		where not(
			<is-builtin-type> <type-of> exp1 <+
			<is-builtin-type> <type-of> exp2)
		where not (
			<?IntType()> <type-of> exp1;
			<?IntType()> <type-of> exp2)
	type-of: AOp(_, exp1, exp2) -> IntType()
		where not(
			<is-builtin-type> <type-of> exp1 <+
			<is-builtin-type> <type-of> exp2)
		where 
			<?IntType()> <type-of> exp1;
			<?IntType()> <type-of> exp2
	type-of: AOp(op, exp1, exp2) -> <builtin-type-op-return> (<type-of> exp1, op, <type-of> exp2)
		where 
			<is-builtin-type> <type-of> exp1 <+
			<is-builtin-type> <type-of> exp2
	type-of: Umin(exp) -> <type-of> exp
	type-of: PreInc(exp) -> <type-of> exp
	type-of: PostInc(exp) -> <type-of> exp
	type-of: PreDec(exp) -> <type-of> exp
	type-of: PostDec(exp) -> <type-of> exp
	type-of: Concat(_, _) -> StringType()
	type-of: Not(_) -> BoolType()
	type-of: True() -> BoolType()
	type-of: False() -> BoolType()
	type-of: IntConst(_) -> IntType()
	type-of: FloatConst(_) -> RealType()
	type-of: StrConst(_) -> StringType()
	type-of: Null() -> NullType()
	type-of: Vector2Const(_, _) -> Vector2()
	type-of: Vector3Const(_, _, _) -> Vector3()
	type-of: Vector4Const(_, _, _, _) -> Vector4()
	
	type-of: VarRef(name) -> <type-of> <get-var> name
	type-of: PropRef(prop, exp) -> <get-property-type(|prop)> <type-of> exp		
	type-of: This(name) -> <type-of> <get-object> name
	type-of: New(type, _) -> type
	type-of: Access(exp, prop) -> <get-property-type(|prop)> <type-of> exp
	type-of: BuiltinAccess(exp, prop) -> <get-property-type(|prop)> <type-of> exp
	type-of: ObjectBuiltinAccess(objectProp, prop) -> <get-property-type(|prop)> type
		where type := <get-property-type(|objectProp)> ClientObject()
	type-of: Call(exp, func, _) -> <get-function-type(|func)> <type-of> exp
	type-of: BuiltinCall(exp, func, _) -> <get-function-type(|func)> <type-of> exp
	type-of: ObjectBuiltinCall(objectProp, func, _) -> <get-function-type(|func)> type
		where type := <get-property-type(|objectProp)> ClientObject()
	type-of: ObjectNew(objectRef, _) -> <type-of> objectRef
	type-of: ObjectRef(name) -> <type-of> <get-object> name
	type-of: ComponentRef(name) -> <type-of> <get-component> name
	type-of: PluginRef(name) -> <type-of> <get-plugin> name
	type-of: EnumValueRef(name, _) -> name
	type-of: Expression(exp) -> <type-of> exp

rules // Definitions
	
	type-of: ObjectDef(name, _, _, _, _, _, _, _) -> CustomType(name)
	type-of: ExternalObjectDef(name) -> CustomType(name)
	type-of: Param(_, type) -> type
    type-of: VarDef(_, _, type, _) -> type	
    type-of: PropDef(_, _, type, _) -> type
    type-of: ComponentDef(_, type, _) -> type
	type-of: PluginDef(_, type, _) -> type
	
rules // Properties
	
	type-of: BuiltinObjectProp(type, _) -> type
	type-of: ObjectProp(_, type, _) -> type
	type-of: ComponentProp(_, type, _) -> type
	type-of: PluginProp(_, type, _) -> type
	type-of: Property(_, type, _) -> type
	
rules // Type projections
		
	// Gets the type of a property.
	get-property-type(|prop): CustomType(type) -> propType
		where
			(<type-of> <get-object-property> (type, prop) 
			<+ <get-property-type(|prop)> ClientObject())
			=> propType
	get-property-type(|prop): type -> propType
		where not (<is-object-type> type)
		where 
			(<builtin-type-prop-type> (type, prop) 
			<+ <fetch-elem(builtin-type-prop-type)> <map(\ t -> (t, prop) \)> <get-type-parents> type) 
			=> propType

	// Gets the type of a function.
	get-function-type(|func): CustomType(type) -> funcType
		where funcType := 
			//<type-of> <get-object-function> (type, func) <+ // TODO: Objects do not have custom functions yet.  
			<get-function-type(|func)> ClientObject()
	get-function-type(|func): type -> funcType
		where not (<is-object-type> type)
		where 
			<builtin-type-func-return> (type, func) 
			<+ <fetch-elem(builtin-type-func-return)> <map(\ t -> (t, func) \)> <get-type-parents> type
			=> funcType
			
	// Gets the parents of given type.
	get-type-parents: CustomType(type) -> [ClientObject() | <get-type-parents> ClientObject()]
	get-type-parents: type -> <concat> [bases, <mapconcat(get-type-parents)> bases]
		where not (<is-object-type> type)
		where bases := <builtin-type-bases> type
	get-type-parent: (type, parent) -> <fetch(?parent)> <get-type-parents> type
	
rules // Type checks
	
	// Checks if given type is of standard (POD) type.
	is-standard-type = ?VoidType()
	is-standard-type = ?BoolType()
	is-standard-type = ?IntType()
	is-standard-type = ?RealType()
	is-standard-type = ?StringType()
	is-standard-type = ?NullType()
	
	// Checks if given type is of object type.
	is-object-type = ?CustomType(_)
	
	// Checks if given type is a builtin type or enum.
	is-builtin-type-or-enum = is-builtin-type <+ is-builtin-enum
	
	// Checks if given type is a type at all.
	is-type = is-standard-type <+ is-object-type <+ is-builtin-type-or-enum
	
	// Checks if the property is defined in given type
	type-has-property(|prop) = ?CustomType(type); 
		(<get-object-property> (type, prop) <+
		<type-has-property(|prop)> ClientObject()) 
	type-has-property(|prop) = ?type; 
		not (<is-object-type> type);
		(<has-builtin-type-prop> (type, prop) <+
		<one(type-has-property(|prop))> <get-type-parents> type)
	// Checks if the function is defined in given type
	type-has-function(|func) = ?CustomType(type); 
		//<get-object-function> (type, prop) <+ // TODO: Objects do not have custom functions yet. 
		<type-has-function(|func)> ClientObject() 
	type-has-function(|func) = ?type; 
		not (<is-object-type> type);
		(<has-builtin-type-func> (type, func) <+
		<one(type-has-function(|func))> <get-type-parents> type)	