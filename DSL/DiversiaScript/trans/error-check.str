module error-check

imports 
	include/DiversiaScript
	signatures
	type-project
	name-project
	read-project
	data/builtin-types
	data/events

rules // defs
	
	editor-error: e@VarDef(object, name,CustomType(type),expr) -> (CustomType(type), $[Unknown type.])
		where 
			not(is-builtin-type(|type));
			not(is-object(|type))
	
	editor-error: e@VarDef(object, name,type ,expr) -> (e, $[Overwriting object properties not allowed.])
		//where <debug> (object, name, name2)
		where <get-type-property> (CustomType(object), <strip-annos>name)		
	
	editor-error: e@VarDef(object, name, type, expr)-> (expr, $[Expected [<printable>type] but found [<printable>type2].])
		where 
			<type-of> expr => type2;
			not(<match-type>(type,type2))
	
	editor-error: e@PropDef(object, name, type, exp) -> (e, $[Overwriting built-in properties not allowed.])
		where is-builtin-property(|"ClientObject", name) 

	editor-error: e@PluginDef(name,CustomType(type),props) -> (CustomType(type), $[Unknown plugin.])
		where not(is-builtin-plugin(|type))
			
	editor-error: e@ComponentDef(name,CustomType(type),props) -> (CustomType(type), $[Unknown component.])
		where not(is-builtin-component(|type))
	
rules // read-only/writeable
	
	editor-error: e@Assign(exp, _) -> (exp, $[Left side must be a variable.]) 
		where <read-only> exp;
		not(<?Access(_,_)> exp);
		not(<?PropRef(_,_)> exp)		
		
	editor-error: Assign(e@Access(exp,name),_) -> (e, $[Property is read-only.]) 
		where <is-read-only><get-type-property> (<type-of>exp,name)

	editor-error: Assign(e@PropRef(name,object),_) -> (e, $[Property is read-only.]) 
		where <is-read-only><get-type-property> (<type-of>object,name)	
		
	editor-error: e@ObjectProp(type,name,exp) -> (name, $[Property is read-only.])
		where <is-read-only><get-type-property> (type,name)

	editor-error: e@ComponentProp(type,name,exp) -> (name, $[Property is read-only.])
		where <is-read-only><get-type-property> (type,name)

	editor-error: e@PluginProp(type,name,exp) -> (name, $[Property is read-only.])
		where <is-read-only><get-type-property> (type,name)
		
rules // types
	
	editor-error: e@Assign(exp1, exp2) -> (e, $[Expected [<printable>type1] but found [<printable>type2].]) 
		where
			//not(<read-only> exp1);
			<type-of> exp1 => type1;
			<type-of> exp2 => type2;
			not(<match-type>(type1,type2))
			
	editor-error: e@AOp(_, _, exp) -> (exp, $[Expected Int or Real but found [<printable>type]])
		where 
			<type-of> exp => type;
			not(<match-type>(<type-of> e,type))
			
	editor-error: e@AOp(_, exp, _) -> (exp, $[Expected Int or Real but found [<printable>type]])
		where 
			<type-of> exp => type;
			not(<match-type>(<type-of> e,type))
			
	editor-error: Concat(exp, _) -> (exp, $[Expected String but found [<printable>type]])
		where 
			<type-of> exp => type;
			not(<match-type>(StringType(), type))
				
	editor-error: Concat(_, exp) -> (exp, $[Expected String but found [<printable>type]])
		where 
			<type-of> exp => type;
			not(<match-type>(StringType(), type))
			
	editor-error: e@ObjectProp(type,name,exp) -> (exp, $[Expected [<printable>type2] but found [<printable>type3].])
		where
			<type-of><get-type-property>(type, name) => type2;
			<type-of> exp => type3;
			not(<match-type>(type2,type3))
		
	editor-error: e@PluginProp(type,name,exp) -> (exp, $[Expected [<printable>type2] but found [<printable>type3].])
		where 
			<type-of><get-type-property>(type, name) => type2;
			<type-of> exp => type3;
			not(<match-type>(type2,type3))
		
	editor-error: e@ComponentProp(type,name,exp) -> (exp, $[Expected [<printable>type2] but found [<printable>type3].])
		where 
			<type-of><get-type-property>(type, name) => type2;
			<type-of> exp => type3;
			not(<match-type>(type2,type3))

rules // broken references
	
	editor-error: e@ObjectRef(name) -> (e, $[Undefined object.])
		where not(<get-object> name)
	
	editor-error: e@PropRef(name, expr) -> (e, $[Undefined variable or property.])
		where not(<get-type-property>(<type-of>expr, name))
		
	editor-error: e@Access(expr, name) -> (e, $[Undefined property.])
		where not(<get-type-property>(<type-of>expr, name))
	
	editor-error: e@Call(This(object), name, []) -> (e, $[Undefined function.])
		where not(is-builtin-function(|"ClientObject", name)) // TODO added custom functions
		
	editor-error: e@ObjectProp(type,name,exp) -> (name, $[Undefined property.])
		where not(<get-type-property>(type, name))
		
	editor-error: e@PluginProp(type,name,exp) -> (name, $[Undefined property.])
		where not(<get-type-property>(type, name))
		
	editor-error: e@ComponentProp(type,name,exp) -> (name, $[Undefined property.])
		where not(<get-type-property>(type, name))

rules // states
	
	editor-error: e@StateRef(name) -> (name, $[Undefined state.])
		where not(<get-state>name)
	
	editor-error: e@ObjectDef(name,_,_,_,_,[],states,_)-> (name, $[Object is missing a default state.])
		where <gt>(<length> states, 0)

rules // events
	
	editor-error: e@EventDef(name,_,_) -> (name, $[Undefined event.])
		where not(<get-event-data> name)
	editor-error: e@EventDef(name,params,_) -> (params, $[Does not match exptected parameters: [<printable>types1]])
		where 
			<get-event-types> name => types1;
			<types-of> params => types2;
			not(<match-types>(types2, types1))
		
rules // statements
	
	editor-error: Print(exp) -> (exp, $[Expected String but found [<printable>type]])
		where 
			<type-of> exp => type;
			not(<match-type>(StringType(), type))
			
rules // debug errors
	
	editor-error: e@ComponentProp(name,exp) -> (e, $[Decorate failed.])
	editor-error: e@PluginProp(name,exp) -> (e, $[Decorate failed.])
	editor-error: e@ObjectProp(name,exp) -> (e, $[Decorate failed.])
	editor-error: e@This() -> (e, $[Decorate failed.])
	
	
		
