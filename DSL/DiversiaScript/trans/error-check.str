module error-check

imports 
	include/DiversiaScript
	signatures
	type-project
	name-project
	read-project
	data/builtin-type
	data/builtin-type-prop
	data/builtin-type-func
	data/events

rules // defs
	
	editor-error: e@VarDef(object, name, type, expr) -> (CustomType(type), $[Unknown type.])
		where not(<is-type> type)
	
	editor-error: e@VarDef(object, name,type ,expr) -> (e, $[Overwriting object properties not allowed.])
		where <get-object-property> (CustomType(object), <strip-annos>name)		
	
	editor-error: e@VarDef(object, name, type, expr)-> (expr, $[Expected [<printable>type] but found [<printable>type2].])
		where 
			<type-of> expr => type2;
			not(<match-type>(type,type2))
	
	editor-error: e@PropDef(object, name, type, exp) -> (e, $[Overwriting built-in properties not allowed.])
		where <has-builtin-type-prop(|ClientComponent())> name#([]) 

	// TODO: Disallow overwriting of function if functions are added
	
rules // read-only/writeable
	
	editor-error: e@Assign(exp, _) -> (exp, $[Left side must be a variable.]) 
		where <read-only> exp;
		not(<?Access(_,_)> exp);
		not(<?PropRef(_,_)> exp)		
		
	// TODO: Fix
	/*editor-error: Assign(e@Access(exp,name),_) -> (e, $[Property is read-only.]) 
		where <is-read-only><get-type-property> (<type-of>exp,name)

	editor-error: Assign(e@PropRef(name,object),_) -> (e, $[Property is read-only.]) 
		where <is-read-only><get-type-property> (<type-of>object,name)	
		
	editor-error: e@ObjectProp(type,name,exp) -> (name, $[Property is read-only.])
		where <is-read-only><get-type-property> (type,name)

	editor-error: e@ComponentProp(type,name,exp) -> (name, $[Property is read-only.])
		where <is-read-only><get-type-property> (type,name)

	editor-error: e@PluginProp(type,name,exp) -> (name, $[Property is read-only.])
		where <is-read-only><get-type-property> (type,name)*/
		
rules // types
	
	editor-error: e@Assign(exp1, exp2) -> (e, $[Expected [<printable>type1] but found [<printable>type2].]) 
		where
			//not(<read-only> exp1);
			<type-of> exp1 => type1;
			<type-of> exp2 => type2;
			not(<match-type>(type1,type2))
			
	editor-error: e@AOp(_, _, exp) -> (exp, $[Expected Int or Real but found [<printable>type]])
		where 
			<type-of> exp => type;
			not(<match-type>(<type-of> e,type))
			
	editor-error: e@AOp(_, exp, _) -> (exp, $[Expected Int or Real but found [<printable>type]])
		where 
			<type-of> exp => type;
			not(<match-type>(<type-of> e,type))
			
	editor-error: Concat(exp, _) -> (exp, $[Expected String but found [<printable>type]])
		where 
			<type-of> exp => type;
			not(<match-type>(StringType(), type))
				
	editor-error: Concat(_, exp) -> (exp, $[Expected String but found [<printable>type]])
		where 
			<type-of> exp => type;
			not(<match-type>(StringType(), type))
			
	editor-error: e@ObjectProp(CustomType(object),name,exp) -> (exp, $[Expected [<printable> type] but found [<printable> type2].])
		where
			<type-of> <get-object-property> (object, name) => type;
			<type-of> exp => type2;
			not(<match-type> (type, type2))

	editor-error: e@BuiltinObjectProp(prop,exp) -> (exp, $[Expected [<printable> type] but found [<printable> type2].])
		where
			<builtin-type-prop-type(|ClientObject())> prop => type; // TODO: Parent type properties are not found.
			<type-of> exp => type2;
			not(<match-type> (type, type2))
		
	editor-error: e@PluginProp(plugin,prop,exp) -> (exp, $[Expected [<printable> type] but found [<printable> type2].])
		where 
			<builtin-type-prop-type(|plugin)> prop => type; // TODO: Parent type properties are not found.
			<type-of> exp => type2;
			not(<match-type> (type, type2))
		
	editor-error: e@ComponentProp(component,prop,exp) -> (exp, $[Expected [<printable> type] but found [<printable> type2].])
		where
			<builtin-type-prop-type(|component)> prop => type; // TODO: Parent type properties are not found.
			<type-of> exp => type2;
			not(<match-type>(type, type2))

rules // broken references
	
	editor-error: e@ObjectRef(name) -> (e, $[Undefined object.])
		where not(<get-object> name)
	
	editor-error: e@PropRef(name, expr) -> (e, $[Undefined variable or property.])
		where not(<get-object-property>(<type-of>expr, name))

	editor-error: e@Access(expr, name) -> (e, $[Undefined property.])
		where not(<type-has-property(|name)> <type-of> expr)
				
	editor-error: e@BuiltinAccess(expr, prop) -> (e, $[Undefined property.])
		where not(<type-has-property(|prop)> <type-of> expr)
	
	editor-error: e@Call(exp, func, _) -> (e, $[Undefined function.])
		where not(<type-has-function(|func)> <type-of> exp)
		// TODO: Parameter check
		
	editor-error: e@BuiltinCall(expr, func, _) -> (e, $[Undefined function.])
		where not(<type-has-function(|func)> <type-of> expr)
		// TODO: Parameter check
		
	editor-error: e@ObjectProp(type,name,exp) -> (name, $[Undefined property.])
		where not(<type-has-property(|name)> type)
		
	editor-error: e@PluginProp(type,prop,exp) -> (prop, $[Undefined property.])
		where not(<type-has-property(|prop)> type)
		
	editor-error: e@ComponentProp(type,prop,exp) -> (prop, $[Undefined property.])
		where not(<type-has-property(|prop)> type)

rules // states
	
	editor-error: e@StateRef(name) -> (name, $[Undefined state.])
		where not(<get-state>name)
	
	editor-error: e@ObjectDef(name,_,_,_,_,[],states,_)-> (name, $[Object is missing a default state.])
		where <gt>(<length> states, 0)

rules // events
	
	editor-error: e@EventDef(name,_,_) -> (name, $[Undefined event.])
		where not(<get-event-data> name)
	editor-error: e@EventDef(name,params,_) -> (params, $[Does not match exptected parameters: [<printable>types1]])
		where 
			<get-event-types> name => types1;
			<types-of> params => types2;
			not(<match-types>(types2, types1))
		
rules // statements
	
	editor-error: Print(exp) -> (exp, $[Expected String but found [<printable>type]])
		where 
			<type-of> exp => type;
			not(<match-type>(StringType(), type))
			
rules // debug errors
	
	editor-error: e@ComponentProp(name,exp) -> (e, $[Decorate failed.])
	editor-error: e@PluginProp(name,exp) -> (e, $[Decorate failed.])
	editor-error: e@ObjectProp(name,exp) -> (e, $[Decorate failed.])
	editor-error: e@This() -> (e, $[Decorate failed.])
	