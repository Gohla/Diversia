module type-project

imports
	include/DiversiaScript
	signatures
	name-project
	data/builtin-types
	
rules // util
	printable: BoolType() -> "Boolean"
	printable: IntType() -> "Int"
	printable: RealType() -> "Real"
	printable: StringType() -> "String"
	printable: VoidType() -> "Void"
	printable: CustomType(name) -> name
	printable: todo -> todo
		where not(
			<?BoolType()> todo;
			<?IntType()> todo;
			<?RealType()> todo;
			<?StringType()> todo;
			<?VoidType()> todo;
			<?CustomType(_)> todo
		)

rules // type matching
	
	match-type(|var-type,exp-type) = <?var-type> exp-type


rules  // expr
	
	type-of: BOp(_, _, _) -> BoolType()
	type-of: AOp(_, exp1, exp2) -> RealType()
		where 
			<?RealType()><type-of> exp1;
			<?RealType()><type-of> exp2

	type-of: AOp(_, exp1, exp2) -> IntType()
		where 
			<?IntType()><type-of> exp1;
			<?IntType()><type-of> exp2
	
	type-of: True() -> BoolType()
	type-of: False() -> BoolType()
	type-of: IntConst(_) -> IntType()
	type-of: FloatConst(_) -> RealType()
	type-of: StrConst(_) -> StringType()
	type-of: Null() -> VoidType()
	
	type-of: Vector2Const(_,_) -> CustomType("Vector2")
	type-of: Vector3Const(_,_,_) -> CustomType("Vector3")
	type-of: Vector4Const(_,_,_,_) -> CustomType("Vector4")
	
	type-of: VarRef(name) -> <type-of><get-var2> name
	
	type-of: PropRef(property, This(object)) -> <type-of><get-object-property>(object, property)
			
	type-of: This(object) -> CustomType(object)
	type-of: New(object,_) -> CustomType(object)
	
	type-of: Access(exp, prop) -> type
		where 
			<get-name><type-of>exp => object;
			is-object-type(|object);
			<type-of><get-object-property> (object,prop) => type
			
	type-of: Access(exp, prop) -> type
		where 
			<type-of>exp => builtin;
			is-builtin-type(|builtin);
			<type-of><get-builtin-property>(builtin,prop) => type

	type-of: Call(exp, function, _) -> type
		where 
			<get-name><type-of>exp => object;
			is-object-type(|object);
			<type-of><get-object-function> (object,function) => type
			
	type-of: Call(exp, function, _) -> type
		where 
			<type-of> exp => builtin;
			is-builtin-type(|builtin);
			<type-of><get-builtin-function> (builtin,function) => type
	
	type-of: ObjectRef(name) -> CustomType(name)
	type-of: ComponentRef(name) -> <type-of><get-component> name
	type-of: PluginRef(name) -> <type-of><get-plugin> name

rules // defs
	type-of: ObjectDef(name, _, _, _, _, _, _, _, _) -> CustomType(name)
	type-of: ExternalObjectDef(name) -> CustomType(name)
	   
	type-of: Param(_, type) -> type
    type-of: VarDef(_, type, _) -> type	
    type-of: PropDef(_,_,type,_) -> type
    type-of: ComponentDef(_, type, _) -> type
	type-of: PluginDef(_, type, _) -> type
    type-of: Property(_,type) -> type  
	type-of: Function(_,type,_) -> type
		where not(<?type> "") // TODO: temp stuff
	type-of: Function(_,"",_) -> VoidType() //  TODO: temp stuff
	