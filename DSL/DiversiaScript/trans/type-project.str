module type-project

imports
	include/DiversiaScript
	signatures
	name-project
	data/builtin-type
	data/builtin-type-base
	data/builtin-type-prop
	data/builtin-type-func
	data/builtin-enum
	
rules // util
	
	printable = 
		switch ?type
		    case BoolType() : !"Boolean"
		    case IntType() : !"Int"
			case RealType() : !"Real"
			case StringType() : !"String"
			case VoidType() : !"Void"
			case NullType() : !"Void*"
			case CustomType(?name) : !$[[name] (object)]
			case [?type|[]] : <printable> type
			case [?type|?types]; not(<?[]> types) : !$[[<printable> type], [<printable>types]] 
		    otherwise : ?name#(_); !$[[name] (built-in)]
		end		

rules // type matching
	
	// Matches if types are the same or if the second type is a parent type of the first.
	match-type = ?(type1, type2); (<?type1> type2 <+ <get-type-parent> (type2, type1)) 
		
	// Matches reals and integers.
	match-type = ?(RealType(), IntType())
	match-type = ?(IntType(), RealType())
		
	// Matches everything with null.
	match-type = ?(_, NullType())
		
	// Matches lists of types.
	match-types = ?([], [])
	match-types = ?([var-type|rest1],[exp-type|rest2]); <match-type>(var-type,exp-type); <match-types>(rest1,rest2)

rules  // expr
	
	types-of : list -> <map(type-of)> list
	
	type-of: BOp(_, _, _) -> BoolType()
	type-of: AOp(_, exp1, exp2) -> RealType()
		where not(
			<?IntType()><type-of> exp1;
			<?IntType()><type-of> exp2)
	type-of: AOp(_, exp1, exp2) -> IntType()
		where 
			<?IntType()><type-of> exp1;
			<?IntType()><type-of> exp2
	type-of: Concat(_, _) -> StringType()
	type-of: True() -> BoolType()
	type-of: False() -> BoolType()
	type-of: IntConst(_) -> IntType()
	type-of: FloatConst(_) -> RealType()
	type-of: StrConst(_) -> StringType()
	type-of: Null() -> NullType()
	type-of: Vector2Const(_,_) -> Vector2()
	type-of: Vector3Const(_,_,_) -> Vector3()
	type-of: Vector4Const(_,_,_,_) -> Vector4()
	
	type-of: VarRef(name) -> <type-of><get-var> name
	type-of: PropRef(property, exp) -> <type-of><get-object-property>(<type-of>exp, property) // TODO: not sure if this is right		
	type-of: This(name) -> <type-of><get-object> name
	type-of: New(type, _) -> type
	type-of: Access(exp, prop) -> <type-of><get-object-property> (<type-of>exp,prop)
	type-of: BuiltinAccess(exp, prop) -> <builtin-type-prop-type(|<type-of> exp)> prop
	type-of: Call(exp, func, _) -> <type-of><get-object-property>(<type-of>exp,func)
	type-of: BuiltinCall(exp, func, _) -> <builtin-type-func-return(|<type-of> exp)> func
	type-of: ObjectNew(objectRef, _) -> <type-of> objectRef
	type-of: ObjectRef(name) -> <type-of><get-object> name
	type-of: ComponentRef(name) -> <type-of><get-component> name
	type-of: PluginRef(name) -> <type-of><get-plugin> name
	type-of: EnumValueRef(name, _) -> name

rules // defs
	
	type-of: ObjectDef(name, _, _, _, _, _, _, _) -> CustomType(name)
	type-of: ExternalObjectDef(name) -> CustomType(name)
	type-of: Param(_, type) -> type
    type-of: VarDef(_, _, type, _) -> type	
    type-of: PropDef(_,_,type,_) -> type
    type-of: ComponentDef(_, type, _) -> type
	type-of: PluginDef(_, type, _) -> type
	
rules // getting type data
	
	is-standard-type = ?VoidType()
	is-standard-type = ?BoolType()
	is-standard-type = ?IntType()
	is-standard-type = ?RealType()
	is-standard-type = ?StringType()
	is-standard-type = ?NullType()
	
	is-object-type = ?CustomType(_)
	
	is-type = is-standard-type <+ is-object-type <+ is-builtin-type <+ is-builtin-enum
	
	type-has-property(|prop) = ?CustomType(type); 
		(<get-object-property> (type, prop) <+
		<type-has-property(|prop)> ClientObject()) 
	type-has-property(|prop) = ?type; 
		not(<is-object-type> type);
		(<has-builtin-type-prop(|type)> prop <+
		<one(type-has-property(|prop))> <get-type-parents> type)
	type-has-function(|func) = ?CustomType(type); 
		//<get-object-function> (type, prop) <+ // TODO: Objects do not have custom functions yet. 
		<type-has-function(|func)> ClientObject() 
	type-has-function(|func) = ?type; 
		not(<is-object-type> type);
		(<has-builtin-type-func(|type)> func <+
		<one(type-has-function(|func))> <get-type-parents> type)

	get-type-parents: CustomType(type) -> [ClientObject() | <builtin-type-bases> ClientObject()]
	get-type-parents: type -> <builtin-type-bases> type
		where not(<is-object-type> type)
	get-type-parent: (type, parent) -> <?parent> <get-type-parents> type
		