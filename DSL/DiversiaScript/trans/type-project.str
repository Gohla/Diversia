module type-project

imports
	include/DiversiaScript
	signatures
	name-project
	data/builtin-types
	
rules // util
	printable: BoolType() -> "Boolean"
	printable: IntType() -> "Int"
	printable: RealType() -> "Real"
	printable: StringType() -> "String"
	printable: VoidType() -> "Void"
	printable: NullType() -> "Void*"
	printable: CustomType(name) -> name
	printable: [type|[]] -> <printable>type
	printable: [type|types] -> $[[<printable>type],[<printable>types]]
		where not(<?[]> types)

rules // type matching
	
	match-type:(var-type,exp-type) -> (var-type,exp-type)
		where <?var-type> exp-type
		
	match-type:(RealType(),IntType()) -> (RealType(),IntType())
	match-type:(CustomType("Enum"),StringType()) -> (CustomType("Enum"),StringType()) // TODO: temp solution
	match-type:(type, NullType()) -> (type, NullType())
	
	match-type:(CustomType(var-type),exp-type) -> (var-type,exp-type)
		where <get-type-parent> (exp-type, var-type)
		
	match-types:([],[]) -> ([],[])
	match-types:([var-type|rest1],[exp-type|rest2]) -> ([var-type|rest1],[exp-type|rest2])
		where 
			<match-type>(var-type,exp-type);
			<match-types>(rest1,rest2)

rules  // expr
	
	types-of : list -> <map(type-of)> list
	
	type-of: BOp(_, _, _) -> BoolType()
	type-of: AOp(_, exp1, exp2) -> RealType()
		where not(
			<?IntType()><type-of> exp1;
			<?IntType()><type-of> exp2)
	type-of: AOp(_, exp1, exp2) -> IntType()
		where 
			<?IntType()><type-of> exp1;
			<?IntType()><type-of> exp2
	type-of: Concat(_, _) -> StringType()
	type-of: True() -> BoolType()
	type-of: False() -> BoolType()
	type-of: IntConst(_) -> IntType()
	type-of: FloatConst(_) -> RealType()
	type-of: StrConst(_) -> StringType()
	type-of: Null() -> NullType()
	type-of: Vector2Const(_,_) -> CustomType("Vector2")
	type-of: Vector3Const(_,_,_) -> CustomType("Vector3")
	type-of: Vector4Const(_,_,_,_) -> CustomType("Vector4")
	
	type-of: VarRef(name) -> <type-of><get-var> name
	type-of: PropRef(property, exp) -> <type-of><get-type-property>(<type-of>exp, property)		
	type-of: This(name) -> <type-of><get-object> name
	type-of: New(object,_) -> <type-of>object
	type-of: Access(exp, prop) -> <type-of><get-type-property> (<type-of>exp,prop)
	type-of: Call(exp, function, _) -> <type-of><get-type-function>(<type-of>exp,function)
	type-of: ObjectNew(objectRef, _) -> <type-of> objectRef
	type-of: ObjectRef(name) -> <type-of><get-object> name
	type-of: ComponentRef(name) -> <type-of><get-component> name
	type-of: PluginRef(name) -> <type-of><get-plugin> name

rules // defs
	type-of: ObjectDef(name, _, _, _, _, _, _, _) -> CustomType(name)
	type-of: ExternalObjectDef(name) -> CustomType(name)
	type-of: Param(_, type) -> type
    type-of: VarDef(_, _, type, _) -> type	
    type-of: PropDef(_,_,type,_) -> type
    type-of: ComponentDef(_, type, _) -> type
	type-of: PluginDef(_, type, _) -> type
    type-of: Property(_,type,_) -> type  
	type-of: Function(_,type,_) -> type
		where not(<?type> "") // TODO: temp stuff
	type-of: Function(_,"",_) -> VoidType() //  TODO: temp stuff
	
rules // getting type data
	
	
	get-all-types = <conc>(<get-all-objects>,<get-all-builtin-types>)
	
	get-type-properties: CustomType(type) -> properties
		where not(is-object(|type));
			<get-builtin-properties> type => properties
	get-type-properties: CustomType(object) -> properties
		where is-object(|object);
			<conc>(<get-all-properties> object, <get-builtin-properties> "ClientObject") => properties
	get-type-property: (type, propName) -> property
		where <fetch-elem(has-name(|propName))><get-type-properties> type => property
	
	get-type-functions: CustomType(type) -> functions
		where not(is-object(|type));
			<get-builtin-functions> type => functions
	get-type-functions: CustomType(object) -> functions
		where is-object(|object);
			<get-builtin-functions> "ClientObject" => functions
	get-type-function: (type, funcName) -> function
		where <fetch-elem(has-name(|funcName))><get-type-functions> type => function
	
	get-type-parents: CustomType(type) -> parents
		where not(is-object(|type));
			<get-builtin-parents> type => parents
	get-type-parents: CustomType(object) -> parents
		where is-object(|object);
			![<get-builtin-type> "ClientObject" | <get-builtin-parents> "ClientObject"] => parents
	get-type-parent: (type, parentName) -> parent
		where <fetch-elem(has-name(|parentName))><get-type-parents> type => parent
			
	
	