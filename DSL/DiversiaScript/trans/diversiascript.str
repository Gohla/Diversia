module diversiascript

imports

	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	include/DiversiaScript
	lib/editor-common.generated
	  
	rename
	store
	desugar
	decorate
	import
	
	codegen/lua/generate
	codegen/lua/normalise
	codegen/xml/generate
	codegen/xml/simplexml
	
	editor/complete
	editor/hover
	editor/resolve
	editor/check/error
	editor/check/warning
	editor/check/note
  
strategies
	
	// Analysis the AST (resolve imports, desugar, decorate, rename) and stores declarations from the AST and all imports.
	analyse-all(normalise|path, type) = import-all(normalise|path, type); desugar-all; decorate-all; normalise; rename-all; store-all
	analyse-all(|path, type) = analyse-all(id|path, type)
	analyse-all(|path) = analyse-all(id|path, "analysis")
	// Analysis the AST (resolve imports, desugar, decorate, rename) and stores declarations from all imports.
	analyse-all-nostore(normalise|path, type) = import-all(normalise|path, type); desugar-all; decorate-all; normalise; rename-all
	analyse-all-nostore(|path, type) = analyse-all-nostore(id|path, type)
	analyse-all-nostore(|path) = analyse-all-nostore(id|path, "analysis")
	// Analysis the AST (resolve imports, desugar, decorate, rename), stores declarations from the AST and all imports and
	// finally merges the AST's from the imported files into this AST.
	analyse-all-merge(normalise|path, type) = import-all(normalise|path, type); desugar-all; decorate-all; normalise; rename-all; store-all; import-merge(|path, type)
	analyse-all-merge(|path, type) = analyse-all-merge(id|path, type)
	analyse-all-merge(|path) = analyse-all-merge(id|path, "analysis")

rules // Main editor interface (defined by editor/DiversiaScript-Builders and -References.esv)
  
	// Analyzes the current program, returning a tuple with errors, warnings, and notes;
	// each a list of (term, message) tuples or simply (message) terms.
	editor-analyze: (ast, path, project-path) -> (ast', errors, warnings, notes)
		where
	    	editor-init;
	    	<analyse-all(|path)> ast => ast';
			<collect-all(editor-error, conc)> ast' => errors ;
			<collect-all(editor-warning, conc)> ast' => warnings ;
			<collect-all(editor-note, conc)> ast' => notes
			
	// Runs the DefaultClient.
	run: (selected, position, ast, path, project-path) -> None()
		where dir := <dirname> <abspath> <dirname> path
		where clientDir := $[[<plugin-path>]/client/]
		where
			editor-init;
	    	(<chdir> clientDir <+ fatal-err(|$[Could not cd into [clientDir].]));
	    	(<call> ($[[clientDir]Diversia-DefaultClient-DbgInfo.exe], ["-o", "-m", $["[dir]"], "-f", "Game.xml"]) <+ 
	    		fatal-err(|$[Could not start the client or the cliented terminated abnormally.]))
	    		
    // Runs the DefaultClient with lua scripts generated from current AST.
    generate-and-run: (selected, position, ast, path, project-path) -> None()
        where <generate-lua-files> (selected, position, ast, path, project-path)
        where <run> (selected, position, ast, path, project-path)
	    		  
	// Transforms analysed AST to Lua.
	generate-lua-files: (selected, position, ast, path, project-path) -> None()
		where
			editor-init;
			dir 	 := <abspath> <dirname> path;
			analysed := <analyse-all-merge(normalise-luaxml(|dir)|path, "normalise-luaxml")> ast;
	    	<lua-tofiles(|path)> <to-lua> analysed;
	    	<game-xml-tofile(|path)> <to-game-xml> analysed
	generate-lua-strings: (selected, position, ast, path, project-path) -> (filename, result)
		where
			editor-init;
	    	filename := <guarantee-extension(|"lua")> path;
	    	result   := <lua-tostrings> <to-lua> <analyse-all-merge(|path)> ast
	generate-lua-aterm: (selected, position, ast, path, project-path) -> (filename, result)
		where 
	    	editor-init;
	    	filename := <guarantee-extension(|"aterm")> path;
	      	result   := <to-lua> <analyse-all-merge(|path)> ast
	     
	// Transforms analysed AST to game XML. 	
	generate-xml: (selected, position, ast, path, project-path) -> (filename, result)
		where
			editor-init;
			dir 	 := <abspath> <dirname> path;
	    	filename := <guarantee-extension(|"xml")> path;
	    	result   := <print-xml> <to-game-xml> <analyse-all-merge(normalise-luaxml(|dir)|path, "normalise-luaxml")> ast
	generate-xml-aterm: (selected, position, ast, path, project-path) -> (filename, result)
		where
			editor-init;
			dir 	 := <abspath> <dirname> path;
	    	filename := <guarantee-extension(|"aterm")> path;
	    	result   := <to-game-xml> <analyse-all-merge(normalise-luaxml(|dir)|path, "normalise-luaxml")> ast
	    	
	// Transforms analysed AST to C++.
	generate-cpp: (selected, position, ast, path, project-path) -> (filename, result)
		where
	    	editor-init;
	    	filename := <guarantee-extension(|"cpp")> path;
	    	result   := "NYI"

	// Prints the analysed AST.
	generate-analysed-aterm: (selected, position, ast, path, project-path) -> (filename, result)
		where
			editor-init;
			filename := <guarantee-extension(|"aterm")> path;
			result   := <analyse-all-merge(|path)> ast
	  	
	// Prints the AST of a selection.
	generate-aterm: (selected, position, ast, path, project-path) -> (filename, result)
		where
			editor-init;
			filename := <guarantee-extension(|"aterm")> path;
			result   := selected
			
	// Code completion
	editor-complete: (node, position, ast, path, project-path) -> proposals
		where
			<complete> (node, position, ast) => proposals
			
	// Hover tooltip
	editor-hover: (node, position, ast, path, project-path) -> result
		where
			<type-tooltip> (node, position, ast) => result
			
	// Reference resolving
	editor-resolve: (node, position, ast, path, project-path) -> result
		where
			<resolve> node => result