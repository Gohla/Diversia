module decorate

imports 
	include/DiversiaScript
	signatures
	type-project
	name-project
	data/builtin-type

strategies
	decorate-all = alltd(decorate); topdown(try(decorate-props))
rules 

	decorate: EventDef(name, params, statements) -> 
			  EventDef(name, params, statements')
			where
			 	<innermost(decorate-event)> statements => statements'
	
	decorate-event: VarRef(name) -> PropRef(name, "ShouldNotHereAfterRename")
	decorate-event: VarDef(name,type,expr) -> VarDef("Global", name,type,expr)

	decorate: ObjectDef(name, propAssigns, propDefs, componentDefs, varDefs, defaultStateDef, stateDefs, eventDefs) ->
			  ObjectDef(name, propAssigns', propDefs', componentDefs', varDefs', defaultStateDef', stateDefs', eventDefs')
			 where	
			 	<innermost(decorate-object(|name))> propAssigns => propAssigns';
			 	<innermost(decorate-object(|name))> componentDefs => componentDefs';
			 	<innermost(decorate-object(|name))> varDefs => varDefs';
			 	<innermost(decorate-object(|name))> defaultStateDef => defaultStateDef';
			 	<innermost(decorate-object(|name))> stateDefs => stateDefs';
			 	<innermost(decorate-object(|name))> eventDefs => eventDefs';
			 	<innermost(decorate-object(|name))> propDefs => propDefs'
			 	
	decorate-object(|object): VarRef(name) -> PropRef(name, This())
	decorate-object(|object): PropDef(name,type,expr) -> PropDef(object,name,type,expr)
	decorate-object(|object): VarDef(name,type,expr) -> VarDef(object, name,type,expr)
	decorate-object(|object): New(type, params) -> Call(This(), type, params)
		where not(<is-builtin-type> type) //TODO match with constructor too.
	decorate-object(|object): This() -> This(object)
	
	decorate-props: ObjectDef(name, props, propDefs, componentDefs, varDefs, defaultStateDef, stateDefs, eventDefs) ->
			ObjectDef(name, props', propDefs, componentDefs, varDefs, defaultStateDef', stateDefs', eventDefs)
			where 
				<map(decorate-prop(|CustomType(name)))> props => props';
				<map(decorate-props(|CustomType(name)))> stateDefs => stateDefs';
				<map(decorate-props(|CustomType(name)))> defaultStateDef => defaultStateDef'
			
	decorate-props(|type): StateDef(name, props, componentDefs, varDefs, eventDefs) -> 
			StateDef(name, props', componentDefs, varDefs, eventDefs)
			where <map(decorate-prop(|type))> props => props'
	
	decorate-props(|type): DefaultStateDef(name, props, componentDefs, varDefs, eventDefs) ->
			DefaultStateDef(name, props', componentDefs, varDefs, eventDefs)	
			where <map(decorate-prop(|type))> props => props'
	
	decorate-props: ComponentDef(name, type, props) -> ComponentDef(name, type, props')
			where <map(decorate-prop(|type))> props => props'
	
	decorate-props: PluginDef(name, type, props) -> PluginDef(name, type, props')
			where <map(decorate-prop(|type))> props => props'		
	
	decorate-props: ObjectNew(ObjectRef(object), props) -> ObjectNew(ObjectRef(object), props')
			where <map(decorate-prop(|CustomType(object)))> props => props'		
	
	decorate-prop(|type): ComponentProp(name, expr) -> ComponentProp(type, name, expr)
	decorate-prop(|type): PluginProp(name, expr) -> PluginProp(type, name, expr)
	decorate-prop(|type): ObjectProp(name, expr) -> ObjectProp(type, name, expr)
	decorate-prop(|type): BuiltinObjectProp(name, expr) -> BuiltinObjectProp(name, expr)	