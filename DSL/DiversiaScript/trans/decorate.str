module decorate

imports 
	include/DiversiaScript
	signatures
	type-project
	name-project

strategies
	decorate-all = alltd(try(decorate))
	message(|msg): x->x where <debug> msg
	
rules 

	decorate: EventDef(name, params, statements) -> 
			  EventDef(name, params',statements')
			where
				<innermost(decorate(|name))> params => params';
			 	<innermost(decorate(|name))> statements => statements'

	decorate: ObjectDef(name, propAssigns, propDefs, componentDefs, varDefs, defaultStateDef, stateDefs, eventDefs) ->
			  ObjectDef(name, propAssigns'', propDefs', componentDefs', varDefs', defaultStateDef', stateDefs', eventDefs')
			 where	
			 	<innermost(decorate(|name))> propAssigns => propAssigns';
			 	<innermost(decorate(|name))> componentDefs => componentDefs';
			 	<innermost(decorate(|name))> varDefs => varDefs';
			 	<innermost(decorate(|name))> defaultStateDef => defaultStateDef';
			 	<innermost(decorate(|name))> stateDefs => stateDefs';
			 	<innermost(decorate(|name))> eventDefs => eventDefs';
			 	<innermost(decorate(|name))> propDefs => propDefs';
			 	<map(decorate2(|name))> propAssigns' => propAssigns''
			 	
	decorate(|object): VarRef(name) -> PropRef(name, object)
	decorate(|object): PropDef(name,type,expr) -> PropDef(object,name,type,expr)
	//decorate(|object): VarDef(name,type,expr) -> VarDef(object,name,type,expr) // not yet! :p
	decorate(|object): ObjectNew(ObjectRef(name), propAssigns) -> ObjectNew(ObjectRef(name), propAssigns')
		where <map(decorate2(|name))> propAssigns => propAssigns'
		
	decorate2(|object): ObjectProp(name , expr) -> ObjectProp(PropRef(name, object) , expr)
	
                     
	