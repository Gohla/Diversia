module decorate

imports 
	include/DiversiaScript
	signatures
	type-project
	name-project

strategies
	decorate-all = topdown(try(decorate))
	
rules  // add inferred type data

	
	decorate: EventDef(name, params, statements) -> 
			  EventDef(name, params', statements')
			where
				<innermost(decorate(|name))> params => params';
			 	<innermost(decorate(|name))> statements => statements'

	decorate: ObjectDef(name, propAssigns, propDefs, componentDefs, /*objectDefs,*/ varDefs, defaultStateDef, stateDefs, eventDefs) ->
			  ObjectDef(name, propAssigns', propDefs', componentDefs', /*objectDefs,*/ varDefs', defaultStateDef', stateDefs', eventDefs')
			 where	
			 	<innermost(decorate(|name))> propAssigns => propAssigns';
			 	<innermost(decorate(|name))> componentDefs => componentDefs';
			 	<innermost(decorate(|name))> varDefs => varDefs';
			 	<innermost(decorate(|name))> defaultStateDef => defaultStateDef';
			 	<innermost(decorate(|name))> stateDefs => stateDefs';
			 	<innermost(decorate(|name))> eventDefs => eventDefs';
			 	<innermost(decorate(|name))> propDefs => propDefs'
			 	
	decorate(|object): VarRef(name) -> PropRef(name, object)
	decorate(|object): PropDef(name,type,expr) -> PropDef(object,name,type,expr)
	//decorate(|object): ObjectProp(name , expr) -> ObjectProp(PropRef(name, object) , expr)
	//	where not(<?PropRef(_,_)> name)
	
	/*decorate(|object): 
		ObjectNew(ObjectRef(object2), propAssigns) -> ObjectNew(ObjectRef(object2), propAssigns')
		where 
			<map(decorate(|object2))> propAssigns => propAssigns'
	
	decorate(|object): ObjectProp(name, expr) -> ObjectProp(object, name, expr)*/
	
                     
	