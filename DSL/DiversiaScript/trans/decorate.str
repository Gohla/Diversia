module decorate

imports 
	include/DiversiaScript
	signatures
	type-project
	name-project
	data/builtin-types

strategies
	decorate-all = try(alltd(decorate))
rules 

	decorate: EventDef(name, params, statements) -> 
			  EventDef(name, params,statements')
			where
			 	<innermost(decorate-event)> statements => statements'
	
	decorate-event: VarRef(name) -> PropRef(name, "ShouldNotHereAfterRename")
	

	decorate: ObjectDef(name, propAssigns, propDefs, componentDefs, varDefs, defaultStateDef, stateDefs, eventDefs) ->
			  ObjectDef(name, propAssigns', propDefs', componentDefs', varDefs', defaultStateDef', stateDefs', eventDefs')
			 where	
			 	<innermost(decorate-object(|name))> propAssigns => propAssigns';
			 	<innermost(decorate-object(|name))> componentDefs => componentDefs';
			 	<innermost(decorate-object(|name))> varDefs => varDefs';
			 	<innermost(decorate-object(|name))> defaultStateDef => defaultStateDef';
			 	<innermost(decorate-object(|name))> stateDefs => stateDefs';
			 	<innermost(decorate-object(|name))> eventDefs => eventDefs';
			 	<innermost(decorate-object(|name))> propDefs => propDefs'//;
			 	//<map(decorate2(|name))> propAssigns' => propAssigns''
			 	
	decorate-object(|object): VarRef(name) -> PropRef(name, This())
	decorate-object(|object): PropDef(name,type,expr) -> PropDef(object,name,type,expr)
	decorate-object(|object): New(name, params) -> Call(This(), name, params)
		where not(is-builtin-type(|name))
	decorate-object(|object): This() -> This(object)
	
		
	//decorate(|object): VarDef(name,type,expr) -> VarDef(object,name,type,expr) // not yet! :p
	//decorate(|object): ObjectNew(ObjectRef(name), propAssigns) -> ObjectNew(ObjectRef(name), propAssigns')
	//	where <map(decorate2(|name))> propAssigns => propAssigns'
		
	//decorate2(|object): ObjectProp(name , expr) -> ObjectProp(PropRef(name, object) , expr)
	//	where not(<?PropRef(_,_)> name)
	
                     
	