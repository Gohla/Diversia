module editor/complete

imports
	
	include/DiversiaScript
	lib/editor-common.generated
	
	signatures
	
	projection/type
	
	data/type-prop
	data/component
	data/plugin
	
	util

rules
	
	complete: (node, position, ast) -> proposals
		where <mapconcat(complete-sort)> <candidate-sorts> => proposals 
	complete: (node, position, ast) -> []
		where not (<mapconcat(complete-sort)> <candidate-sorts>) 
		
	complete-sort: "PluginProp" -> 
		<map(complete-prop-print)> <remove-all(complete-prop-filter)> <mapconcat(complete-prop-getprops)> <builtin-plugins>
	complete-sort: "ComponentProp" -> 
		<map(complete-prop-print)> <remove-all(complete-prop-filter)> <mapconcat(complete-prop-getprops)> <builtin-components>
	complete-sort: "ObjectProp" -> 
		<map(complete-prop-print)> <remove-all(complete-prop-filter)> <mapconcat(complete-prop-getprops)> [ClientObject(), Object(), Node()]
	complete-prop-print: (type, Property(prop, propType, _)) -> 
		([<crush> prop], $[Property of type [<crush> type] with type [<printable> propType].])
	complete-prop-filter = ?(_, Property(_, _, False()))
	complete-prop-getprops: type -> <map(complete-prop-getprop(|type))> <builtin-type-props> type
	complete-prop-getprop(|type): prop -> (type, prop)