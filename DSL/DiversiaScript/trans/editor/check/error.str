module editor/check/error

imports
	
	include/DiversiaScript
	
	signatures
	
	projection/type
	projection/name
	projection/assignable
	
	data/type
	data/type-prop
	data/type-func
	data/type-op
	data/event
	
	util

rules // Definitions
	
	editor-error: VarDef(_, _, type, _) -> (type, $[Unknown type: [<printable> type]])
		where not (<is-type> type)
	
	editor-error: e@VarDef(object, name, _, _) -> (e, $[Overwriting object property [name] not allowed.])
		where <get-object-property> (CustomType(object), <strip-annos> name)		
	
	editor-error: VarDef(_, _, type, exp)-> (exp, $[Expected [<printable> type] but found [<printable> type2].])
		where 
			<type-of> exp => type2;
			not (<match-type> (type, type2))
	
	editor-error: e@PropDef(_, name, _, _) -> (e, $[Overwriting built-in property [name] is not allowed.])
		where <has-builtin-type-prop> (ClientComponent(), name#([]))
		
	editor-error: PropDef(_, _, type, exp)-> (exp, $[Expected [<printable> type] but found [<printable> type2].])
		where 
			<type-of> exp => type2;
			not (<match-type> (type, type2)) 

	// TODO: Disallow overwriting of function if functions are added
	
rules // Assignable
	
	editor-error: Assign(exp, _) -> (exp, $[Cannot assign to this expression.]) 
		where not (<is-assignable> exp)	

	editor-error: BuiltinObjectProp(prop, _) -> (prop, $[Property [<printable> prop] is read-only.])
		where not (<is-property-assignable(|prop)> ClientObject())

	editor-error: ComponentProp(type, prop, _) -> (prop, $[Property [<printable> prop] is read-only.])
		where <type-has-property(|prop)> type
		where not (<is-property-assignable(|prop)> type)

	editor-error: PluginProp(type, prop, _) -> (prop, $[Property [<printable> prop] is read-only.])
		where <type-has-property(|prop)> type
		where not (<is-property-assignable(|prop)> type)
		
rules // Types
	
	editor-error: e@Assign(exp1, exp2) -> (e, $[Expected [<printable> type1] but found [<printable> type2].]) 
		where
			<type-of> exp1 => type1;
			<type-of> exp2 => type2;
			not (<match-type> (type1, type2))
			
	editor-error: e@AOp(_, exp1, exp2) -> (exp1, $[Expected Int or Real but found [<printable> type].])
		where not (
			<is-builtin-type> <type-of> exp1  <+
			<is-builtin-type> <type-of> exp2)
		where 
			<type-of> exp1 => type;
			not (<match-type> (<type-of> e, type))
			
	editor-error: e@AOp(_, exp1, exp2) -> (exp2, $[Expected Int or Real but found [<printable> type].])
		where not (
			<is-builtin-type> <type-of> exp1  <+
			<is-builtin-type> <type-of> exp2)
		where 
			<type-of> exp2 => type;
			not (<match-type> (<type-of> e, type))

	editor-error: e@AOp(op, exp1, exp2) -> (e, $[Operator [<printable> type1] [<printable> op] [<printable> type2] is undefined.])
		where 
			(<is-builtin-type> <type-of> exp1 <+
			<is-builtin-type> <type-of> exp2)
		where
			<type-of> exp1 => type1;
			<type-of> exp2 => type2
		where not (<has-builtin-type-op> (type1, op, type2))

	is-comparison = ?EQ() <+ ?NEQ()

	editor-error: BOp(op, exp1, exp2) -> (exp1, $[Expected Boolean (convertable) type but found [<printable> type].])
		where not (<is-builtin-type> <type-of> exp1)
		where not (<is-comparison> op)
		where
			<type-of> exp1 => type; 
			not (<bool-convertable> type)

	editor-error: BOp(op, exp1, exp2) -> (exp2, $[Expected Boolean (convertable) type but found [<printable> type].])
		where not (<is-builtin-type> <type-of> exp2)
		where not (<is-comparison> op)
		where
			<type-of> exp2 => type; 
			not (<bool-convertable> type)

	editor-error: e@BOp(op, exp1, exp2) -> (e, $[Operator [<printable> type1] [<printable> op] [<printable> type2] is undefined.])
		where not
			(<is-builtin-type> <type-of> exp1 <+
			<is-builtin-type> <type-of> exp2)
		where <is-comparison> op
		where
			<type-of> exp1 => type1; 
			<type-of> exp2 => type2; 
			not (<match-type> (type1, type2))

	editor-error: e@BOp(op, exp1, exp2) -> (e, $[Operator [<printable> type1] [<printable> op] [<printable> type2] is undefined.])
		where 
			(<is-builtin-type> <type-of> exp1 <+
			<is-builtin-type> <type-of> exp2)
		where not (<is-comparison> op)
		where
			<type-of> exp1 => type1;
			<type-of> exp2 => type2
		where not (<has-builtin-type-op> (type1, op, type2))

	editor-error: e@BOp(op, exp1, exp2) -> (e, $[Operator [<printable> type1] [<printable> op] [<printable> type2] is undefined.])
		where 
			(<is-builtin-type> <type-of> exp1 <+
			<is-builtin-type> <type-of> exp2)
		where <is-comparison> op
		where
			<type-of> exp1 => type1;
			<type-of> exp2 => type2
		where not (<?NullType()> type2)
		where not (<has-builtin-type-op> (type1, op, type2))
		
	unary-op-basic-error: exp -> <type-of> exp
		where not (<is-builtin-type> <type-of> exp)
		where <type-of> exp => type
		where not (<?IntType()> type <+ <?RealType()> type)

	unary-op-builtin-error: (exp, op) -> <type-of> exp
		where <is-builtin-type> <type-of> exp
		where <type-of> exp => type
		where not (<has-builtin-type-op> (type, op, VoidType()))
		
	editor-error: Umin(exp) -> (exp, $[Expected Int or Real but found [<printable> type].])
		where <unary-op-basic-error> exp => type

	editor-error: e@Umin(exp) -> (e, $[Operator -[<printable> type] is undefined.])
		where <unary-op-builtin-error> (exp, UMIN()) => type

	editor-error: PreDec(exp) -> (exp, $[Expected Int or Real but found [<printable> type].])
		where <unary-op-basic-error> exp => type

	editor-error: e@PreDec(exp) -> (e, $[Operator --[<printable> type] is undefined.])
		where <unary-op-builtin-error> (exp, PREDEC()) => type

	editor-error: PostDec(exp) -> (exp, $[Expected Int or Real but found [<printable> type].])
		where <unary-op-basic-error> exp => type

	editor-error: e@PostDec(exp) -> (e, $[Operator [<printable> type]-- is undefined.])
		where <unary-op-builtin-error> (exp, POSTDEC()) => type

	editor-error: PreInc(exp) -> (exp, $[Expected Int or Real but found [<printable> type].])
		where <unary-op-basic-error> exp => type

	editor-error: e@PreInc(exp) -> (e, $[Operator ++[<printable> type] is undefined.])
		where <unary-op-builtin-error> (exp, PREINC()) => type

	editor-error: PostInc(exp) -> (exp, $[Expected Int or Real but found [<printable> type].])
		where <unary-op-basic-error> exp => type

	editor-error: e@PostInc(exp) -> (e, $[Operator [<printable> type]++ is undefined.])
		where <unary-op-builtin-error> (exp, POSTINC()) => type

	editor-error: Not(exp) -> (exp, $[Expected Boolean but found [<printable> type].])
		where not (<is-builtin-type> <type-of> exp)
		where <type-of> exp => type
		where not (<?BoolType()> type)

	editor-error: e@Not(exp) -> (e, $[Operator ![<printable> type] is undefined.])
		where <unary-op-builtin-error> (exp, NOT()) => type
		
	editor-error: Concat(exp, _) -> (exp, $[Expected String but found [<printable> type].])
		where 
			<type-of> exp => type;
			not (<match-type> (StringType(), type))
				
	editor-error: Concat(_, exp) -> (exp, $[Expected String but found [<printable> type].])
		where 
			<type-of> exp => type;
			not (<match-type> (StringType(), type))
			
	editor-error: ObjectProp(CustomType(object), name, exp) -> (exp, $[Expected [<printable> type] but found [<printable> type2].])
		where
			<type-of> <get-object-property> (object, name) => type;
			<type-of> exp => type2;
			not (<match-type> (type, type2))

	editor-error: BuiltinObjectProp(prop, exp) -> (exp, $[Expected [<printable> type] but found [<printable> type2].])
		where
			<get-property-type(|prop)> ClientObject() => type;
			<type-of> exp => type2;
			not (<match-type> (type, type2))
		
	editor-error: PluginProp(plugin, prop, exp) -> (exp, $[Expected [<printable> type] but found [<printable> type2].])
		where 
			<get-property-type(|prop)> plugin => type;
			<type-of> exp => type2;
			not (<match-type> (type, type2))
		
	editor-error: ComponentProp(component, prop, exp) -> (exp, $[Expected [<printable> type] but found [<printable> type2].])
		where
			<get-property-type(|prop)> component => type;
			<type-of> exp => type2;
			not (<match-type> (type, type2))
			
	editor-error: e@ArrayConst(exps) -> (e, $[Inconsistent types in Array.])
		where
			not (<foldl(match-type)> <take-rev-1> <map(type-of)> exps)
			
	editor-error: e@DictConst(exps) -> (e, $[Inconsistent types in Dict.])
		where
			<unzip> exps => (keys, values);
			(not (<foldl(match-type)> <take-rev-1> <map(type-of)> keys) <+
			not (<foldl(match-type)> <take-rev-1> <map(type-of)> values))

rules // References
	
	editor-error: e@ObjectRef(name) -> (e, $[Undefined object: [name]])
		where not (<get-object> name)
	
	editor-error: e@PropRef(name, exp) -> (e, $[Undefined property: [name]])
		where not (<type-of> exp)
		
	editor-error: e@PropRef(name, exp) -> (e, $[Variable or property [name] is undefined in type [<printable> type].])
		where type := <type-of> exp
		where not (<type-has-property(|name)> type)

	editor-error: e@Access(exp, name) -> (e, $[Property [name] is undefined in type [<printable> type].])
		where type := <type-of> exp
		where not (<type-has-property(|name)> type)
				
	editor-error: e@BuiltinAccess(exp, prop) -> (e, $[Property [<printable> prop] is undefined in type [<printable> type].])
		where type := <type-of> exp
		where not (<type-has-property(|prop)> type)
	
	editor-error: e@Call(exp, func, _) -> (e, $[Function [<printable> func] is undefined in type [<printable> type].])
		where type := <type-of> exp
		where not (<type-has-function(|func)> type)
		// TODO: Parameter check
		
	editor-error: e@BuiltinCall(exp, func, _) -> (e, $[Function [<printable> func] is undefined in type [<printable> type].])
		where type := <type-of> exp
		where not (<type-has-function(|func)> type)
		// TODO: Parameter check
		
	editor-error: ObjectProp(type, name, _) -> (name, $[Property [name] is undefined in type [<printable> type].])
		where not (<type-has-property(|name)> type)
		
	editor-error: PluginProp(type, prop, _) -> (prop, $[Property [<printable> prop] is undefined in type [<printable> type].])
		where not (<type-has-property(|prop)> type)
		
	editor-error: ComponentProp(type, prop, _) -> (prop, $[Property [<printable> prop] is undefined in type [<printable> type].])
		where not (<type-has-property(|prop)> type)

rules // States
	
	editor-error: StateRef(name) -> (name, $[Undefined state: [name]])
		where not (<get-state> name)
	
	editor-error: ObjectDef(name, _, _, _, _, [], states, _)-> (name, $[Object [name] is missing a default state.])
		where <gt> (<length> states, 0)

rules // Events
	
	editor-error: EventDef(name, _, _) -> (name, $[Undefined event: [name]])
		where not (<get-event-data> name)
		
	editor-error: EventDef(name, params, _) -> (name, $[Parameters do not match expected parameters: [<printable> types1].])
		where 
			<get-event-types> name => types1;
			<types-of> params => types2;
			not (<match-types> (types2, types1))
		
rules // Statements
	
	editor-error: Print(exp) -> (exp, $[Expected String but found [<printable> type].])
		where 
			<type-of> exp => type;
			not (<match-type> (StringType(), type))
			
	editor-error: ForArray(varDef, array, _) -> (varDef, $[Expected [<printable> valType] but found [<printable> varType].])
		where
			<type-of> varDef => varType;
			<type-of> array => ArrayType(valType);
			not (<match-type> (varType, valType))
			
	editor-error: ForArray(_, array, _) -> (array, $[Expected Array but found [<printable> arrayType].])
		where 
			<type-of> array => arrayType;
			not (<?ArrayType(_)> arrayType)
			
	editor-error: ForDict(keyVarDef, _, dict, _) -> (keyVarDef, $[Expected [<printable> keyType] but found [<printable> keyVarType].])
		where
			<type-of> keyVarDef => keyVarType;
			<type-of> dict => DictType(keyType, _);
			not (<match-type> (keyVarType, keyType))
			
	editor-error: ForDict(_, valVarDef, dict, _) -> (valVarDef, $[Expected [<printable> valType] but found [<printable> valVarType].])
		where
			<type-of> valVarDef => valVarType;
			<type-of> dict => DictType(_, valType);
			not (<match-type> (valVarType, valType))
			
	editor-error: ForDict(_, _, dict, _) -> (dict, $[Expected Dict but found [<printable> dictType].])
		where 
			<type-of> dict => dictType;
			not (<?DictType(_, _)> dictType)
			
	editor-error: For(_, exp, _, _) -> (exp, $[Expected Boolean (convertable) type but found [<printable> type].])
		where
			<type-of> exp => type;
			not (<bool-convertable> type)
			
rules // Debug
	
	editor-error: e@ComponentProp(name, exp) -> (e, $[Decorate failed])
	editor-error: e@PluginProp(name, exp) -> (e, $[Decorate failed])
	editor-error: e@ObjectProp(name, exp) -> (e, $[Decorate failed])
	editor-error: e@This() -> (e, $[Decorate failed])
	