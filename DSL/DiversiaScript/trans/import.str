module import

imports
	
	libstratego-lib
	include/DiversiaScript
	lib/editor-common.generated
	diversiascript
	signatures
	
	store
	
strategies
	
	import-all(|path) = topdown(try(import-file(|path)))
	
rules
	
  my-open-import(resolve-path, parse-file, analysis, record-declarations):
    import -> import
    where
      if not(!import => COMPLETION(_)) then
        path       := <resolve-path> import;
        cache-path := <import-cache-path> path;
        if not(<IsImported> path) then
          rules(
            IsImported: path
          );
          ( <is-newer> (cache-path, path);
            file := <record-declarations> <ReadFromFile> cache-path
          <+
            file := <parse-file> path;
            {| CurrentFile:
              rules(CurrentFile := path);
              if <file-exists> path then
                // Only cache if on filesystem (e.g., ignore libstratego-lib)
                <WriteToBinaryFile> (cache-path, <record-declarations> <analysis> file)
              end  
            |}
          )
        end
      end
	
rules
	
	import-file(|path): Import(name) -> Import(name)
		where <my-open-import(import-file-path(|path), parse-file, analyse-all-nostore(|path), store-all)> name
	import-file-path(|path): name -> $[[<dirname> path]/[<try(guarantee-extension(|"div"))> name]]
	
	get-cached-ast(|p): Import(name) -> ast
    	where
    		path       := <import-file-path(|p)> name;
        	cache-path := <import-cache-path> path;
        	ast 	   := <ReadFromFile> cache-path
    import-merge(|path): Start(imports, pluginDefs, objectDefs, eventDefs) -> Start(imports, pluginDefs, objectDefs', eventDefs) 
    	where objectDefs' := <concat> [<mapconcat(get-cached-ast(|path); import-merge(|path); ast-objectDefs)> imports, objectDefs]
    ast-objectDefs: Start(imports, pluginDefs, objectDefs, eventDefs) -> objectDefs
    