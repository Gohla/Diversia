module import

imports
	
	libstratego-lib
	include/DiversiaScript
	lib/editor-common.generated
	diversiascript
	signatures
	
	store
	
strategies
	
	import-all(normalise|path, type) = topdown(try(import-file(normalise|path, type)))
	
rules
	
	my-open-import(resolve-path, parse-file, analysis, record-declarations|type):
		import -> import
   	 	where
      		if not(!import => COMPLETION(_)) then
        		path       := <resolve-path> import;
        		cache-path := $[[<import-cache-path> path]-[type]];
	        	if not(<IsImported> path) then
	          		rules(
	            		IsImported: path
	          		); (
		          		<is-newer> (cache-path, path);
			            file := <record-declarations> <ReadFromFile> cache-path
			          	<+
			            file := <parse-file> path;
			            {| CurrentFile:
			              	rules(CurrentFile := path);
			              	if <file-exists> path then
			                	<WriteToBinaryFile> (cache-path, <record-declarations> <analysis> file)
			              	end  
			            |}
		          	)
	        	end
      		end
	
rules
	
	import-file(normalise|path, type): Import(name) -> Import(name)
		where <my-open-import(import-file-path(|path), parse-file, analyse-all-nostore(normalise|path, type), store-all|type)> name
	import-file-path(|path): name -> $[[<dirname> path]/[<try(guarantee-extension(|"div"))> name]]
	
    import-merge(|path, type): Start(imports, pluginDefs, objectDefs, eventDefs) -> Start(imports, pluginDefs, objectDefs', eventDefs) 
    	where objectDefs' := <concat> [<mapconcat(get-cached-ast(|path, type); import-merge(|path, type); get-ast-objectDefs)> imports, objectDefs]
	get-cached-ast(|p, type): Import(name) -> <ReadFromFile> $[[<import-cache-path> <import-file-path(|p)> name]-[type]]
    get-ast-objectDefs: Start(imports, pluginDefs, objectDefs, eventDefs) -> objectDefs
    