module desugar

imports 
	include/DiversiaScript
	signatures
	type-project

strategies
	desugar-all = innermost(desugar); desugar-object //topdown(repeat(desugar))
	post-desugar-all = desugar-object
	
rules  // simple desugars

	desugar: EventDef(name,statements) -> EventDef(name,[],statements)
	desugar: VarDefNoInit(name,type) -> VarDef(name,type,Null())
	desugar: ComponentDef(CustomType(type),props) -> ComponentDef(type,CustomType(type),props)
	desugar: PluginDef(CustomType(type),props) -> PluginDef(type,CustomType(type),props)
	
	//desugar: VarDefNoType(name, exp) -> VarDef(name, <type-of> exp, exp) // only gets the easy exp
	desugar: Add(e1, e2) 	-> AOp(ADD(), e1, e2)
	desugar: Sub(e1, e2) 	-> AOp(SUB(), e1, e2)
	desugar: Mul(e1, e2) 	-> AOp(MUL(), e1, e2)
	desugar: Div(e1, e2) 	-> AOp(DIV(), e1, e2)
	desugar: Eq(e1, e2) 	-> BOp(EQ(), e1, e2)
	desugar: Neq(e1, e2) 	-> BOp(NEQ(), e1, e2)
	desugar: Lt(e1, e2) 	-> BOp(LT(), e1, e2)
	desugar: Lte(e1, e2) 	-> BOp(LTE(), e1, e2)
	desugar: Gt(e1, e2) 	-> BOp(GT(), e1, e2)
	desugar: Gte(e1, e2) 	-> BOp(GTE(), e1, e2)
	desugar: And(e1, e2) 	-> BOp(AND(), e1, e2)
	desugar: Or(e1, e2) 	-> BOp(OR(), e1, e2)
	
	isVarDef = ?VarDef(_,_,_)
	//isVarDef = ?VarDefNoType(_,_)
	isVarDef = ?VarDefNoInit(_,_)
	isEventDef = ?EventDef(_,_)
	isEventDef = ?EventDef(_,_,_)	
	isStateDef = ?StateDef(_,_)
	isStateDef = ?StateDef(_,_,_,_,_)
	isDefaultStateDef = ?DefaultStateDef(_,_)
	isDefaultStateDef = ?DefaultStateDef(_,_,_,_,_)
	isObjectDef = ?ObjectDef(_,_)
	isObjectDef = ?ObjectDef(_,_,_,_,_,_,_,_)
	isComponentDef = ?ComponentDef(_,_)
	isComponentDef = ?ComponentDef(_,_,_)	
	
	desugar: StateDef(name, defs) -> StateDef(name, propAssigns, componentDefs, varDefs, eventDefs)
		where
			<filter(?ObjectProp(_,_))> defs => propAssigns;
			<filter(isComponentDef)> defs => componentDefs;
			<filter(isVarDef)> defs => varDefs;
			<filter(isEventDef)> defs => eventDefs	
	desugar: DefaultStateDef(name, defs) -> DefaultStateDef(name, propAssigns, componentDefs, varDefs, eventDefs)
		where
			<filter(?ObjectProp(_,_))> defs => propAssigns;
			<filter(isComponentDef)> defs => componentDefs;
			<filter(isVarDef)> defs => varDefs;
			<filter(isEventDef)> defs => eventDefs
				
	desugar: ObjectDef(name, defs) -> ObjectDef(name, propAssigns, componentDefs, objectDefs, varDefs, defaultStateDef, stateDefs, eventDefs)
		where
			<filter(?ObjectProp(_,_))> defs => propAssigns;
			<filter(isObjectDef)> defs => objectDefs;
			<filter(isComponentDef)> defs => componentDefs;
			<filter(isVarDef)> defs => varDefs;
			<filter(isDefaultStateDef)> defs => defaultStateDef;
			<filter(isStateDef)> defs => stateDefs;
			<filter(isEventDef)> defs => eventDefs

rules   // post desugar stuff

	desugar-object: Start(defs) -> Start(<concat>[allobjects, events])
		where 
			<map(desugar-object)><filter(?ObjectDef(_,_,_,_,_,_,_,_))> defs => objects;
			<map(delete-child-refs)> <collect-all(?ObjectDef(_,_,_,_,_,_,_,_))> objects => allobjects;
			<filter(?EventDef(_,_,_))> defs => events
			
	delete-child-refs: 	ObjectDef(name, propAssigns, componentDefs, objectDefs, varDefs, defaultStateDef, stateDefs, eventDefs) -> 
						ObjectDef(name, propAssigns, componentDefs, 			varDefs, defaultStateDef, stateDefs, eventDefs)
	
	desugar-object: ObjectDef(name, propAssigns, componentDefs, objectDefs , varDefs, defaultStateDef, stateDefs, eventDefs ) -> 
					ObjectDef(name, propAssigns, componentDefs, objectDefs', varDefs, defaultStateDef, stateDefs, eventDefs')
		where
			<map(add-parent(|name))> <map(desugar-object)> objectDefs => objectDefs';
			<add-children(|<map(get-name)> objectDefs)> eventDefs => eventDefs'
		
	get-name: ObjectDef(name, _, _, _, _, _, _, _) -> name
	
	create-new-object: object -> ObjectNew(ObjectRef(object),[])
	create-parent-prop: object -> ObjectProp("Parent", ObjectRef(object))
	
	add-parent(|parent): ObjectDef(name, props, components, objects, vars, defaultState, states, events) -> 
		ObjectDef(name, props', components, objects, vars, defaultState, states, events)
		where 
			<create-parent-prop> parent => parentProp;
	 		![parentProp|props] => props'

	add-children(|children): events -> events'
		where
			<update-event(|children)> <filter(?EventDef("Create",_,_))> events => createEvent;
	 		<filter(not(?EventDef("Create",_,_)))> events => otherEvents;
	 		<concat>[createEvent,otherEvents] => events' 
	
	update-event(|objects): [] -> [EventDef("Create",[], news)]
		where 
			 <map(create-new-object)> objects => news

	update-event(|objects): [EventDef("Create",params, statements)] -> 
		[EventDef("Create",params, <concat>[news,statements])]
		where
			<map(create-new-object)> objects => news
	
	
	/*
	// TODO need to following type rules to do type inf.
    get-param-types: name -> []
    typeof: name -> ""
    
	desugar-type: EventDef(event-name,params, statements) -> EventDef(event-name,params',statements) 
	where 
		<get-param-types> event-name => param-types;
		<zip(desugar-params)> (params, param-types) => params'
	
	desugar-params: (Param(name),type) -> Param(name, type)
    desugar-type: VarDefNoType(name, value) -> VarDef(name, <typeof> value, value) // might need te be changed
    */
    

    

	
	