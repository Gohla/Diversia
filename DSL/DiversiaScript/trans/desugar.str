module desugar

imports
	 
	include/DiversiaScript
	
	signatures
	
	projection/type
	projection/name
	
	util

strategies
	
	desugar-all = innermost(desugar); desugar-object
	post-desugar-all = desugar-object
	
rules  // Definitions

	desugar: EventDef(name, statements) -> EventDef(name, [], statements)
	desugar: VarDefNoInit(name, type) -> VarDef(name, type, Null())
	desugar: PropDefNoInit(name, type) -> PropDef(name, type, Null())
	desugar: ComponentDef(type, props) -> ComponentDef(<crush> type, type, props)
	desugar: PluginDef(type, props) -> PluginDef(<crush> type, type, props)
	
rules // Operators
	
	desugar: Add(e1, e2) 	-> AOp(ADD(), e1, e2)
	desugar: Sub(e1, e2) 	-> AOp(SUB(), e1, e2)
	desugar: Mul(e1, e2) 	-> AOp(MUL(), e1, e2)
	desugar: Div(e1, e2) 	-> AOp(DIV(), e1, e2)
	desugar: Eq(e1, e2) 	-> BOp(EQ(), e1, e2)
	desugar: Neq(e1, e2) 	-> BOp(NEQ(), e1, e2)
	desugar: Lt(e1, e2) 	-> BOp(LT(), e1, e2)
	desugar: Lte(e1, e2) 	-> BOp(LTE(), e1, e2)
	desugar: Gt(e1, e2) 	-> BOp(GT(), e1, e2)
	desugar: Gte(e1, e2) 	-> BOp(GTE(), e1, e2)
	desugar: And(e1, e2) 	-> BOp(AND(), e1, e2)
	desugar: Or(e1, e2) 	-> BOp(OR(), e1, e2)
	
rules // Structural	

	isVarDef = ?VarDef(_, _, _)
	isVarDef = ?VarDefNoInit(_, _)
	isEventDef = ?EventDef(_, _)
	isEventDef = ?EventDef(_, _, _)	
	isStateDef = ?StateDef(_, _)
	isStateDef = ?StateDef(_, _, _, _, _)
	isDefaultStateDef = ?DefaultStateDef(_, _)
	isDefaultStateDef = ?DefaultStateDef(_, _, _, _, _)
	isObjectDef = ?ObjectDef(_, _)
	isObjectDef = ?ObjectDef(_, _, _, _, _, _, _, _, _)
	isObjectDef = ?ExternalObjectDef(_)
	isComponentDef = ?ComponentDef(_, _)
	isComponentDef = ?ComponentDef(_, _, _)	
	isPluginDef = ?PluginDef(_, _) 
	isPluginDef = ?PluginDef(_, _, _)
	isPropDef = ?PropDef(_, _, _)
	isPropDef = ?PropDefNoInit(_, _)
	isObjectProp = ?ObjectProp(_, _)
	isObjectProp = ?BuiltinObjectProp(_, _)
	
	desugar: Start(defs) -> Start(pluginDefs, objectDefs, eventDefs)
		where
			<filter(isPluginDef)> defs => pluginDefs;
			<filter(isObjectDef)> defs => objectDefs;
			<filter(isEventDef)> defs => eventDefs	
	
	desugar: StateDef(name, defs) -> StateDef(name, propAssigns, componentDefs, varDefs, eventDefs)
		where
			<filter(isObjectProp)> defs => propAssigns;
			<filter(isComponentDef)> defs => componentDefs;
			<filter(isVarDef)> defs => varDefs;
			<filter(isEventDef)> defs => eventDefs	

	desugar: DefaultStateDef(name, defs) -> DefaultStateDef(name, propAssigns, componentDefs, varDefs, eventDefs)
		where
			<filter(isObjectProp)> defs => propAssigns;
			<filter(isComponentDef)> defs => componentDefs;
			<filter(isVarDef)> defs => varDefs;
			<filter(isEventDef)> defs => eventDefs
				
	desugar: ObjectDef(name, defs) -> ObjectDef(name, propAssigns, propDefs, componentDefs, objectDefs, varDefs, defaultStateDef, stateDefs, eventDefs)
		where
			<filter(isObjectProp)> defs => propAssigns;
			<filter(isObjectDef)> defs => objectDefs;
			<filter(isComponentDef)> defs => componentDefs;
			<filter(isVarDef)> defs => varDefs;
			<filter(isDefaultStateDef)> defs => defaultStateDef;
			<filter(isStateDef)> defs => stateDefs;
			<filter(isPropDef)> defs => propDefs;
			<filter(isEventDef)> defs => eventDefs

rules // Child object

	desugar-object: Start(pluginDefs, objectDefs, eventDefs) -> Start(pluginDefs, objectDefs', eventDefs)
		where 
			<map(desugar-object)> <collect-all(?ObjectDef(_, _, _, _, _, _, _, _, _))> objectDefs => objectDefs'
			
	desugar-object: ObjectDef(name, propAssigns, propDefs, componentDefs, objectDefs, varDefs, defaultStateDef, stateDefs,  eventDefs) -> 
					ObjectDef(name, propAssigns, propDefs, componentDefs,             varDefs', defaultStateDef, stateDefs, eventDefs)
		where
			<conc> (<map(object-to-var)> objectDefs, varDefs) => varDefs'
	
	object-to-var: ObjectDef(name, propAssigns, propDefs, componentDefs, objectDefs , varDefs, defaultStateDef, stateDefs, eventDefs) ->
		PropDef(name, CustomType(name), ObjectNew(ObjectRef(name), [BuiltinObjectProp(Parent(), This())]))
	
	object-to-var: ExternalObjectDef(name) ->  
		PropDef(name, CustomType(name), ObjectNew(ObjectRef(name), [BuiltinObjectProp(Parent(), This())]))                                                                     
	
	/*
	// TODO need to following type rules to do type inf.
    get-param-types: name -> []
    typeof: name -> ""
    
	desugar-type: EventDef(event-name, params, statements) -> EventDef(event-name, params', statements) 
	where 
		<get-param-types> event-name => param-types;
		<zip(desugar-params)> (params, param-types) => params'
	
	desugar-params: (Param(name), type) -> Param(name, type)
    desugar-type: VarDefNoType(name, value) -> VarDef(name, <typeof> value, value) // might need te be changed
    */