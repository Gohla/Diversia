module desugar

imports 
	include/DiversiaScript
	
	signatures

strategies
	desugar-all = desugar-object; innermost(desugar)
rules

	desugar: EventDef(name,statements) -> EventDef(name,[],statements)
	desugar: VarDefNoInit(name,type) -> VarDef(name,type,Null())
	desugar: StateDef(name, defs) -> StateDef(name, propAssigns, componentDefs, varDefs, eventDefs)
		where
			<filter(?PropAssign(_,_))> defs => propAssigns;
			<filter(?ComponentDef(_,_))> defs => componentDefs;
			<filter(?VarDef(_,_,_))> defs => varDefs;
			<filter(?EventDef(_,_))> defs => eventDefs	
	desugar: DefaultStateDef(name, defs) -> DefaultStateDef(name, propAssigns, componentDefs, varDefs, eventDefs)
		where
			<filter(?PropAssign(_,_))> defs => propAssigns;
			<filter(?ComponentDef(_,_))> defs => componentDefs;
			<filter(?VarDef(_,_,_))> defs => varDefs;
			<filter(?EventDef(_,_,_))> defs => eventDefs	


	
	desugar-object: Start(defs) -> Start(<concat>[allobjects, events])
		where 
			<map(desugar-object)><filter(?ObjectDef(_,_))> defs => objects;
			<map(delete-child-refs)><collect-all(?ObjectDef(_,_,_,_,_,_,_,_))> objects => allobjects;
			<filter(?EventDef(_,_,_))> defs => events
			
	delete-child-refs: ObjectDef(name, propAssigns, componentDefs, objectDefs, varDefs, defaultStateDef, stateDefs, eventDefs) -> 
					   ObjectDef(name, propAssigns, componentDefs,             varDefs, defaultStateDef, stateDefs, eventDefs)
	
	desugar-object: ObjectDef(name, defs) -> ObjectDef(name, propAssigns, componentDefs, objectDefs, varDefs, defaultStateDef, stateDefs, eventDefs)
		where
			<filter(?PropAssign(_,_))> defs => propAssigns;
			<map(add-parent(|name))><map(desugar-object)><filter(?ObjectDef(_,_))> defs => objectDefs;
			<filter(?ComponentDef(_,_))> defs => componentDefs;
			<filter(?VarDef(_,_,_))> defs => varDefs;
			<filter(?DefaultStateDef(_,_))> defs => defaultStateDef;
			<filter(?StateDef(_,_))> defs => stateDefs;
			<add-children(|<map(get-name)> objectDefs)><filter(?EventDef(_,_,_))> defs => eventDefs
			
		
	get-name: ObjectDef(name, _, _, _, _, _, _, _) -> name
	
	create-new-object: object -> ObjectNew(ObjectRef(object),[])
	create-parent-prop: object -> PropAssign("Parent", object)
	
	add-parent(|parent): ObjectDef(name, props, components, objects, vars, defaultState, states, events) -> ObjectDef(name, props', components, objects, vars, defaultState, states, events)
		where 
			<create-parent-prop> parent => parentProp;
	 		![parentProp|props] => props'

	add-children(|children): events -> events'
		where
			<update-event(|children)><filter(?EventDef("Create",_,_))> events => createEvent;
	 		<filter(not(?EventDef("Create",_,_)))> events => otherEvents;
	 		<concat>[createEvent,otherEvents] => events' 
	
	update-event(|objects): [] -> [EventDef("Create",[], news)]
		where 
			 <map(create-new-object)> objects => news
	
	update-event(|objects): [EventDef("Create",params, statements)] -> [EventDef("Create",params, <conc>[news,statements])]
		where
			<map(create-new-object)> objects => news
	/*
	// TODO need to following type rules to do type inf.
    get-param-types: name -> []
    typeof: name -> ""
    
	desugar-type: EventDef(event-name,params, statements) -> EventDef(event-name,params',statements) 
	where 
		<get-param-types> event-name => param-types;
		<zip(desugar-params)> (params, param-types) => params'
	
	desugar-params: (Param(name),type) -> Param(name, type)
    desugar-type: VarDefNoType(name, value) -> VarDef(name, <typeof> value, value) // might need te be changed
    */
    

    

	
	