module rename

imports 
	include/DiversiaScript
	lib/namespaces
	namespace
	signatures
	
strategies

	rename-all = alltd(rename)

rules //defs
	
	rename :
		ObjectDef(name, propAssigns, componentDefs, /*objectDefs,*/ varDefs, defaultStateDef, stateDefs, eventDefs) -> 
		ObjectDef(name, propAssigns, componentDefs, /*objectDefs',*/ varDefs', defaultStateDef', stateDefs', eventDefs')
		where 
			//<rename-all> objectDefs => objectDefs'; // all objects are always global
			new-scope (
				<rename-all> varDefs => varDefs';
				<rename-all> defaultStateDef => defaultStateDef';
				<rename-all> stateDefs => stateDefs';
				<rename-all> eventDefs => eventDefs'
			)
			
	
			
	rename :
		StateDef(name, propAssigns, componentDefs, varDefs, eventDefs) ->  
		StateDef(name, propAssigns, componentDefs, varDefs', eventDefs')
		where 
			new-scope (
				<rename-all> varDefs => varDefs';
				<rename-all> eventDefs => eventDefs'
			)
	rename :
		DefaultStateDef(name, propAssigns, componentDefs, varDefs, eventDefs) ->  
		DefaultStateDef(name, propAssigns, componentDefs, varDefs', eventDefs')
		where 
			new-scope (
				<rename-all> varDefs => varDefs';
				<rename-all> eventDefs => eventDefs'
			)
			
	rename :
		EventDef(name, params, statements) -> EventDef(name, params', statements')	
		where 
			new-scope (
				<rename-all> params => params';
				<rename-all> statements => statements'
			)
	rename :
		Param(name,type) -> Param(name',type)
		where
			<rename-declaration(|Vars())> name => name'

	rename : 
		VarDef(name, type, exp) -> VarDef(name', type, exp')
		where
			<rename-declaration(|Vars())> name => name';
			<rename-all> exp => exp'
	//rename : 
	//	VarDefNoType(name, exp) -> VarDefNoType(name', exp')
	//	where
	//		<rename-declaration(|Vars())> name => name';
	//		<rename-all> exp => exp'
			
		
rules // refs
		
	rename :
		PropRef(name, object) -> VarRef(name')
		where
			<rename-reference(|Vars())> name => name'
			
		