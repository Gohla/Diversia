module rename

imports
	
	include/DiversiaScript
	lib/namespaces
	
	signatures
	namespace
	
strategies

	rename-all = rename-all-defs  
	rename-all-refs = alltd(rename-ref)
	rename-all-defs = alltd(rename-def)

rules // Definitions
	
	rename-def :
		Start(imports, pluginDefs, objectDefs, eventDefs) -> Start(imports, pluginDefs', objectDefs', eventDefs'')
		where
			new-scope(
				<rename-all-defs> pluginDefs => pluginDefs';
				<rename-all-defs> objectDefs => objectDefs';
				<rename-all-defs> eventDefs => eventDefs';
				<rename-all-refs> objectDefs' => objectDefs''; // plugin refs and object refs
				<rename-all-refs> eventDefs' => eventDefs'' // plugin refs and object refs
				//<rename-all-refs> pluginDefs => pluginDefs'  not need unless we allow varDefs here.
			)
	
	rename-def :
		ObjectDef(name, propAssigns, propDefs, componentDefs, /*objectDefs, */ varDefs, defaultStateDef, stateDefs, eventDefs) -> 
		ObjectDef(name, propAssigns', propDefs, componentDefs'', /*objectDefs', */ varDefs'', defaultStateDef'', stateDefs'', eventDefs')
		where 
			//<rename-declaration(|Vars())> name => name';
			new-scope (	
				<rename-all-defs> componentDefs => componentDefs';
				<rename-all-defs> varDefs => varDefs';
				<rename-all-defs> defaultStateDef => defaultStateDef';
				<rename-all-defs> stateDefs => stateDefs';
				<rename-all-defs> eventDefs => eventDefs';
				<rename-all-refs> componentDefs' => componentDefs'';
				<rename-all-refs> varDefs' => varDefs'';
				<rename-all-refs> defaultStateDef' => defaultStateDef'';
				<rename-all-refs> stateDefs' => stateDefs'';
				<rename-all-refs> eventDefs' => eventDefs'';
				<rename-all-refs> propAssigns => propAssigns';
				<rename-all-refs> propDefs => propDefs' 				
			)
	rename-def :
		StateDef(name, propAssigns, componentDefs, varDefs, eventDefs) ->  
		StateDef(name', propAssigns', componentDefs', varDefs', eventDefs')
		where 
			<rename-declaration(|States())> name => name';
			new-scope (
				<rename-all-defs> componentDefs => componentDefs';
				<rename-all-defs> varDefs => varDefs';
				<rename-all-defs> eventDefs => eventDefs';
				<rename-all-refs> componentDefs' => componentDefs'';
				<rename-all-refs> varDefs' => varDefs'';
				<rename-all-refs> eventDefs' => eventDefs'';
				<rename-all-refs> propAssigns => propAssigns'
			)
	rename-def :
		DefaultStateDef(name, propAssigns, componentDefs, varDefs, eventDefs) ->  
		DefaultStateDef(name', propAssigns', componentDefs'', varDefs'', eventDefs'')
		where 
			<rename-declaration(|States())> name => name';
			new-scope (
				<rename-all-defs> componentDefs => componentDefs';
				<rename-all-defs> varDefs => varDefs';
				<rename-all-defs> eventDefs => eventDefs';
				<rename-all-refs> componentDefs' => componentDefs'';
				<rename-all-refs> varDefs' => varDefs'';
				<rename-all-refs> eventDefs' => eventDefs'';
				<rename-all-refs> propAssigns => propAssigns'
			)
			
	rename-def :
		EventDef(name, params, statements) -> EventDef(name, params', statements'')	
		where 
			new-scope (
				<rename-all-defs> params => params';
				//<topdown(rename-def ; rename-ref)> statements => statements''
				<rename-all-defs> statements => statements';
				<rename-all-refs> statements' => statements''
			)
	rename-def :
		ForArray(var, array, statements) -> ForArray(var', array, statements'') 
		where 
			new-scope (
				<rename-all-defs> var => var';
				<rename-all-defs> statements => statements';
				<rename-all-refs> statements' => statements''
			)
	rename-def :
		ForDict(key, var, array, statements) -> ForDict(key', var', array, statements'') 
		where 
			new-scope (
				<rename-all-defs> key => key';
				<rename-all-defs> var => var';
				<rename-all-defs> statements => statements';
				<rename-all-refs> statements' => statements''
			)
	rename-def :
		ForDict(key, var, array, statements) -> ForDict(key', var', array, statements'') 
		where 
			new-scope (
				<rename-all-defs> key => key';
				<rename-all-defs> var => var';
				<rename-all-defs> statements => statements';
				<rename-all-refs> statements' => statements''
			)
	
	rename-def :		
		For(varDefs, condition, updates, statements) -> For(varDefs', condition', updates'', statements'')
		where
			new-scope (
				<rename-all-defs> varDefs => varDefs';
				<rename-all-defs> updates => updates';
				<rename-all-defs> statements => statements';
				<rename-all-refs> updates' => updates'';
				<rename-all-refs> statements' => statements'';
				<rename-all-refs> condition => condition'
			)
			
	rename-def :
		If(exp, statements) -> If(exp, statements'')
		where
			new-scope (
				<rename-all-defs> statements => statements';
				<rename-all-refs> statements' => statements''
			)
				
	rename-def :
		If(exp, statements1, statements2) -> If(exp, statements1'', statements2'')
		where
			new-scope (
				<rename-all-defs> statements1 => statements1';
				<rename-all-refs> statements1' => statements1''
			);
			new-scope (
				<rename-all-defs> statements2 => statements2';
				<rename-all-refs> statements2' => statements2''
			)
		
	rename-def :
		While(exp, statements) -> While(exp, statements'')
		where
			new-scope (
				<rename-all-defs> statements => statements';
				<rename-all-refs> statements' => statements''
			)
	rename-def :
		Statements(statements) -> Statements(statements'')
		where
			new-scope (
				<rename-all-defs> statements => statements';
				<rename-all-refs> statements' => statements''
			)
	rename-def :
		Delay(exp, unit, statements) -> Delay(exp, unit, statements'')
		where
			new-scope (
				<rename-all-defs> statements => statements';
				<rename-all-refs> statements' => statements''
			)		

	rename-def :
		Param(name, type) -> Param(name', type)
		where
			<rename-declaration(|Vars())> name => name'		
	rename-def:
		d@ComponentDef(name, type, props) -> ComponentDef(name', type, props)
		where not (<has-annos> d)
		where
			<rename-declaration(|Components())> name => name'
	rename-def:
		ComponentDef(name, type, props){"NoRename"} -> ComponentDef(name{name}, type, props)
			
	rename-def:
		PluginDef(name, type, props)-> PluginDef(name', type, props)
		where
			<rename-declaration(|Plugins())> name => name'

	rename-def: 
		VarDef(object, name, type, exp) -> VarDef(object, name', type, exp)
		where
			<rename-declaration(|Vars())> name => name'
						
rules // References
	
	rename-ref :
		PropRef(name, object) -> VarRef(name')
		where <rename-reference(|Vars())> name => name'
	rename-ref :
		PropRef(name, object) -> ObjectRef(name')
		where <rename-reference(|Objects())> name => name'
	rename-ref :
		PropRef(name, object) -> PluginRef(name')
		where <rename-reference(|Plugins())> name => name'
	rename-ref :
		PropRef(name, object) -> ComponentRef(name')
		where <rename-reference(|Components())> name => name'
	rename-ref :
		StateRef(name) -> StateRef(name')
		where <rename-reference(|States())> name => name'
		