module codegen/lua/luagen

imports
	
	libstratego-lib
	libstratego-gpp
	
	include/DiversiaScript
	../Lua/include/Lua
	
	lib/namespaces
	namespace
	signatures
	name-project
	data/events
	data/builtin-types
	util
	type-project
	
signature constructors
	
	LuaScripts: List(LuaScripts) -> LuaScripts 
	LuaObjectScript: Id * List(Statements) 	-> LuaScript
	LuaGameModeScript: List(Statements)	-> LuaScript
	
strategies
	
	/**
	 * Flattens all statement lists in all lua chunks.
	 */
	lua-flatten-all = topdown(try(lua-flatten-chunk))
	/**
	 * Converts all lua scripts to one big file.
	 */
	lua-tostrings: LuaScripts(scripts) -> <concat-strings> <map(lua-script-tostring)> scripts
	/**
	 * Writes all lua scripts to separate files in given path.
	 */
	lua-tofiles(|path): LuaScripts(scripts) -> <map(lua-tofile(|path))> scripts
	
rules // String and file manipulation.
	
	// Lua AST to string.
	lua-tostring: ast ->
		<box2text-string( |100 )> <ast2box(|[<import-term( ../Lua/include/Lua.pp.af )>])>
	lua-script-tostring: LuaObjectScript(name, statements) -> 
		$[------------------------------ Start object script [name] -----------------------------
		[<lua-tostring> statements]
		------------------------------- End object script [name] ------------------------------
		]
	lua-script-tostring: LuaGameModeScript(statements) -> 
		$[-------------------------------- Start gamemode script --------------------------------
		[<lua-tostring> statements]
		--------------------------------- End gamemode script ---------------------------------
		]
	
	// Lua AST to lua files.
	lua-tofile(|path, name): ast -> ast
		where dir := <abspath> $[[<dirname> path]/gen/]
		where <debug> $[Writing lua script [name] to [dir][name].lua.]
		where try (<mkdir> dir)
		where <fclose> <fputs>( <lua-tostring> ast, <fopen>( $[[dir][name].lua], "w" ) )
	lua-tofile(|path): LuaObjectScript(name, statements) -> <lua-tofile(|path, name)> statements
	lua-tofile(|path): LuaGameModeScript(statements) -> <lua-tofile(|path, "GameMode")> statements
	
rules // Utility
	
	// Strategies for making lua functions
	lua-funcdef(|name) = !FuncDef(FunctionName(name), ParList(), Chunk([]))
	lua-funcdef: (name, content) -> FuncDef(FunctionName(name), ParList(), Chunk(content))
	lua-funcdef: (name, paramNames, content) -> FuncDef(FunctionName(name), ParList(paramNames), Chunk(content))
		where(<gt> (<length> paramNames, 0))
	lua-funcdef: (name, paramNames, content) -> <lua-funcdef> (name, content)
		where(<eq> (<length> paramNames, 0))
		
	// Strategies for manipulating lua functions
	lua-append-statements: (statements, FuncDef(name, params, Chunk(content))) -> FuncDef(name, params, Chunk(<concat> [content, statements]))
	lua-prepend-statements: (statements, FuncDef(name, params, Chunk(content))) -> FuncDef(name, params, Chunk(<concat> [statements, content]))
	lua-replace-function(|name, function): functions -> <map(\ FuncDef(FunctionName(n), _, _) -> function where <eq>(n, name) \ <+ id)> functions
	lua-manip-statements(strat|funcName): (statements, functions) -> <lua-replace-function(|funcName, createFunc)> functions
		where createFunc := <strat> (statements, <fetch-elem(?FuncDef(FunctionName(funcName), _, _))> functions)
	lua-manip-statements(strat|funcName): (statements, functions) -> functions'
		where not( <fetch-elem(?FuncDef(FunctionName("Create"), _, _))> functions )
		where functions' := <concat> [[<lua-funcdef> ("Create", statements)], functions]
	lua-createFunc-append: (s, f) -> <lua-manip-statements(lua-append-statements|"Create")> (s, f)
	lua-createFunc-prepend: (s, f) -> <lua-manip-statements(lua-prepend-statements|"Create")> (s, f)  
	
	// Flattens the statements inside a lua statement block
	lua-flatten-chunk: Chunk(statements) -> Chunk(<flatten-list> statements)
	
	// Defines what the state vardef is
	lua-stateref = !VarRef("__State")
		
rules // Syntax transformation
		
	// Definitions to lua syntax.
	to-lua: Start(pluginDefs, objectDefs, eventDefs) -> LuaScripts(<concat> [[<gamemode-to-lua> (pluginDefs, eventDefs)], <map(objects-to-lua)> objectDefs])
	objects-to-lua: obj@ObjectDef(name, propAssigns, propDefs, componenDefs, varDefs, [ defState@DefaultStateDef(defaultStateName, _, _, _, _) ], stateDefs, eventDefs) -> 
		LuaObjectScript(name, <lua-flatten-all> Chunk(<concat> [[Assignment([<lua-stateref>], [String(defaultStateName)])], functions'''']))
		where functions := <map(events-to-lua)> <filter(events-to-lua-filter)> <map(object-events(|name))> <object-events>
		where functions' := <lua-createFunc-prepend> (<map(component-to-lua(|"Object"))> componenDefs, functions)
		where functions'' := <lua-createFunc-prepend> (<map(propassign-to-lua(|"Object"))> propAssigns, functions')
		where functions''' := <lua-createFunc-prepend> (<map(to-lua)> <object-vars> obj, functions'') 
		where functions'''' := <states-to-lua> (<concat> [[defState], stateDefs], functions''')
	objects-to-lua: obj@ObjectDef(name, propAssigns, propDefs, componenDefs, varDefs, [], _, eventDefs) -> 
		LuaObjectScript(name, <lua-flatten-all> Chunk(functions''')) 
		where functions := <map(events-to-lua)> <filter(events-to-lua-filter)> <map(object-events(|name))> <object-events>
		where functions' := <lua-createFunc-prepend> (<map(component-to-lua(|"Object"))> componenDefs, functions)
		where functions'' := <lua-createFunc-prepend> (<map(propassign-to-lua(|"Object"))> propAssigns, functions')
		where functions''' := <lua-createFunc-prepend> (<map(to-lua)> <object-vars> obj, functions'')
	gamemode-to-lua: (pluginDefs, eventDefs) -> LuaGameModeScript(<lua-flatten-all> Chunk(<concat> [functions']))
		where
		{| LuaScriptReplace:
			rules (LuaScriptReplace: _ -> True());
			functions := <map(global-event-to-lua)> eventDefs;
			functions' := <lua-createFunc-prepend> (<map(to-lua)> pluginDefs, functions)
		|}
	
	// Variables
	to-lua: VarDef(_, _{name}, _, value) -> Assignment([VarRef(name)], [<to-lua> value])
		where not (<?ObjectNew(_, _)> value)
	to-lua: PropDef(_, name, _, value) -> Assignment([VarRef(name)], [<to-lua> value])
		where not (<?ObjectNew(_, _)> value)
		
	// Events
	events-to-lua-filter: events -> events where not( <eq> (<length> events, 0) ) 
	events-to-lua: events -> <lua-funcdef> (name, <map(to-lua)> params, [
			If(Eq(<lua-stateref>, String(stateName)), 
			Chunk(<map(to-lua)> stateEventStatements), // If part
			Chunk(<map(to-lua)> objectEventStatements)) // Else part
		])
		where <eq> (<length> events, 2)
		where EventDef(name, params, objectEventStatements) := <lookup> ("", events)
		where (_, (stateName, EventDef(_, _, stateEventStatements)), _) := <take-2> events
	events-to-lua: events -> <lua-funcdef> (name, <map(to-lua)> params, [
			If(Eq(<lua-stateref>, String(stateName)), 
			Chunk(<map(to-lua)> stateEventStatements), // If part
			<map(\ (elseIfState, EventDef(_, _, elseIfStatements)) -> // ElseIf parts 
				ElseIfPart(Eq(<lua-stateref>, String(elseIfState)), Chunk(<map(to-lua)> elseIfStatements)) \)> otherEvents, 
			Chunk(<map(to-lua)> objectEventStatements)) // Else parts
		]) 
		where <gt> (<length> events, 2)
		where EventDef(name, params, objectEventStatements) := <lookup> ("", events)
		where (_, (stateName, EventDef(_, _, stateEventStatements)), otherEvents) := <take-2> events
	events-to-lua: events -> <lua-funcdef> (name, <map(to-lua)> params, <map(to-lua)> statements)
		where <eq> (<length> events, 1)
		where EventDef(name, params, statements) := <lookup> ("", events)
	events-to-lua: events -> <lua-funcdef> (name, <map(to-lua)> params, [
			If(Eq(<lua-stateref>, String(stateName)), Chunk(<map(to-lua)> statements)) // If part
		])
		where not( <lookup> ("", events) )
		where <eq> (<length> events, 1)
		where (stateName, EventDef(name, params, statements)) := <get-1> events
	events-to-lua: events -> <lua-funcdef> (name, <map(to-lua)> params, [
			IfElseIf(Eq(<lua-stateref>, String(stateName)), Chunk(<map(to-lua)> statements), // If part
			<map(\ (elseIfState, EventDef(_, _, elseIfStatements)) -> // ElseIf parts 
				ElseIfPart(Eq(<lua-stateref>, String(elseIfState)), Chunk(<map(to-lua)> elseIfStatements)) \)> otherEvents)  
		])
		where not( <lookup> ("", events) )
		where <gt> (<length> events, 1)
		where ((stateName, EventDef(name, params, statements)), otherEvents) := <take-1> events
		
	// Components
	component-to-lua(|varName): ComponentDef(_{name}, CustomType(type), properties) -> [
		Assignment([VarRef(name)], [Call(VarRef(varName), "CreateComponent", Args([Access(VarRef("ComponentType"), type), String(name), False()]))]),
		<map(componentprop-to-lua(|name))> properties
	]
	componentprop-to-lua(|componentName): ComponentProp(type, name, exp) -> Assignment([Access(componentName, VarRef(name))], <to-lua> exp)
	destroy-component-to-lua: name -> Call(VarRef(name), "Destroy", Args([]))
	
	// Object properties
	propassign-to-lua(|varName): ObjectProp(_, name, exp) -> Assignment([Access(varName, VarRef(name))], <to-lua> exp)	
	propassign-to-lua(|varName): ObjectProp(name, exp) -> Assignment([Access(varName, VarRef(name))], <to-lua> exp)

	// States
	states-to-lua: (states, functions) -> <concat> [functions, <map(state-to-lua)> states]
	state-to-lua: StateDef(name, propAssigns, componentDefs, varDefs, eventDefs) -> <state-to-lua> (name, propAssigns, componentDefs, varDefs, eventDefs)
	state-to-lua: DefaultStateDef(name, propAssigns, componentDefs, varDefs, eventDefs) -> <state-to-lua> (name, propAssigns, componentDefs, varDefs, eventDefs)
	state-to-lua: (name, propAssigns, componentDefs, varDefs, eventDefs) -> [enterFunc, exitFunc]
		where <gt> (<length> componentDefs, 0) <+ <gt> (<length> propAssigns, 0) <+ <fetch-elem(?EventDef("StateEnter", _, _))> eventDefs 
		where <gt> (<length> componentDefs, 0) <+ <fetch-elem(?EventDef("StateExit", _, _))> eventDefs
		where enterFunc := <state-to-lua-enterFunc> (name, propAssigns, componentDefs, eventDefs)
		where exitFunc := <state-to-lua-exitFunc> (name, componentDefs, eventDefs)
	state-to-lua: (name, propAssigns, componentDefs, varDefs, eventDefs) -> [enterFunc, exitFunc]
		where <gt> (<length> propAssigns, 0) <+ <fetch-elem(?EventDef("StateEnter", _, _))> eventDefs
		where not (<gt> (<length> componentDefs, 0) <+ <fetch-elem(?EventDef("StateExit", _, _))> eventDefs )
		where enterFunc := <state-to-lua-enterFunc> (name, propAssigns, componentDefs, eventDefs)
		where exitFunc := <lua-funcdef(|$[StateExit_[name]])>
	state-to-lua: (name, propAssigns, componentDefs, varDefs, eventDefs) -> [enterFunc, exitFunc]
		where not (<gt> (<length> propAssigns, 0) <+ <fetch-elem(?EventDef("StateEnter", _, _))> eventDefs)
		where not (<gt> (<length> componentDefs, 0) <+ <fetch-elem(?EventDef("StateExit", _, _))> eventDefs )
		where enterFunc := <lua-funcdef(|$[StateEnter_[name]])>
		where exitFunc := <lua-funcdef(|$[StateExit_[name]])>
		
	state-to-lua-enterFunc: (name, propAssigns, componentDefs, eventDefs) -> 
		<lua-funcdef> ($[StateEnter_[name]], <concat> [<map(propassign-to-lua(|"Object"))> propAssigns, <map(to-lua)> componentDefs, <state-to-lua-enterFunc-event> eventDefs])
	state-to-lua-enterFunc-event: eventDefs -> <map(to-lua)> statements
		where <fetch-elem(?EventDef("StateEnter", _, statements))> eventDefs
	state-to-lua-enterFunc-event: eventDefs -> []
		where not (<fetch-elem(?EventDef("StateEnter", _, _))> eventDefs)
	state-to-lua-exitFunc: (name, componentDefs, eventDefs) -> 
		<lua-funcdef> ($[StateExit_[name]], <concat> [<map(get-name; destroy-component-to-lua)> componentDefs, <state-to-lua-exitFunc-event> eventDefs]) 
	state-to-lua-exitFunc-event: eventDefs -> <map(to-lua)> statements
		where <fetch-elem(?EventDef("StateExit", _, statements))> eventDefs
	state-to-lua-exitFunc-event: eventDefs -> []
		where not (<fetch-elem(?EventDef("StateExit", _, _))> eventDefs)
		
	// Plugins
	to-lua: PluginDef(name, CustomType(type), properties) -> [
		Assignment([VarRef(name)], [Call(VarRef("PluginManager"), "CreatePlugin", Args([Access(VarRef("PluginType"), type), String(name)]))]),
		<map(pluginprop-to-lua(|name))> properties
	]
	pluginprop-to-lua(|pluginName): PluginProp(type, name, exp) -> Assignment([Access(pluginName, VarRef(name))], <to-lua> exp)
	
	// Global events
	global-event-to-lua: EventDef(name, params, statements) -> <lua-funcdef> (name, <map(to-lua)> params, <map(to-lua)> statements)
	
rules // Expressions
	
	to-lua: True() -> True()
	to-lua: False() -> False()
	to-lua: IntConst(int) -> Number(int)
	to-lua: FloatConst(float) -> Number(float)
	to-lua: StrConst(string) -> String(string')
		where string' := <un-double-quote> string
	to-lua: StrConst(string) -> String(string)
		where not(<un-double-quote> string)
	to-lua: Vector2Const(exp1, exp2) -> <to-lua> New("Vector2", [exp1, exp2])
	to-lua: Vector3Const(exp1, exp2, exp3) -> <to-lua> New("Vector3", [exp1, exp2, exp3])
	to-lua: Vector4Const(exp1, exp2, exp3, exp4) -> <to-lua> New("Vector4", [exp1, exp2, exp3, exp4])
	to-lua: VarRef(_{name}) -> VarRef(name)
	to-lua: ComponentRef(_{name}) -> VarRef(name)
	to-lua: PluginRef(_{name}) -> VarRef(name)
	to-lua: ObjectRef(_) -> VarRef("Object")
	to-lua: PropRef(name, objectName) -> Access(VarRef("Object"), name)
		where is-builtin-property(|objectName, name)
	to-lua: PropRef(name, objectName) -> VarRef(name)
		where not (is-builtin-property(|objectName, name))
	to-lua: Null() -> LuaNil()
	to-lua: New(type, args) -> Call(Access(VarRef(type), "new"), Args(<map(to-lua)> args))
	is-object-call: c@Call(obj, name, args) -> c
		where <get-type-parent> (<type-of> obj, "Object")
		where is-builtin-function(|"Object", name) 
	to-lua: c@Call(obj, name, args) -> Call(<to-lua> obj, name, Args(<map(to-lua)> args))
		where not (<?This(_)> obj)
		where not (<is-object-call> c)
	to-lua: c@Call(obj, name, args) -> Call(Access(<to-lua> obj, "Object"), name, Args(<map(to-lua)> args))
		where not (<?This(_)> obj)
		where <is-object-call> c  
	to-lua: Call(This(_), name, args) -> Call(VarRef("Object"), name, Args(<map(to-lua)> args))
		where is-builtin-function(|"ClientObject", name)
	to-lua: Call(This(_), name, args) -> Call(name, Args(<map(to-lua)> args))
		where not (is-builtin-function(|"ClientObject", name))
	is-object-access: a@Access(exp, name) -> a
		where not (<?This(_)> exp)
		where <get-type-parent> (<type-of> exp, "Object")
		where is-builtin-property(|"Object", name) 
	to-lua: a@Access(exp, name) -> Access(<to-lua> exp, name)
		where not (<is-object-access> a) 
	to-lua: a@Access(exp, name) -> Access(Access(<to-lua> exp, "Object"), name)
		where <is-object-access> a
	to-lua: This(_) -> VarRef("Object")
	
rules // Operators
	
	to-lua: AOp(ADD(), l, r) -> Add(<to-lua> l, <to-lua> r)
	to-lua: AOp(SUB(), l, r) -> Sub(<to-lua> l, <to-lua> r)
	to-lua: AOp(MUL(), l, r) -> Mul(<to-lua> l, <to-lua> r)
	to-lua: AOp(DIV(), l, r) -> Div(<to-lua> l, <to-lua> r)
	to-lua: BOp(EQ(), l, r) -> Eq(<to-lua> l, <to-lua> r)
	to-lua: BOp(NEQ(), l, r) -> Neq(<to-lua> l, <to-lua> r)
	to-lua: BOp(LT(), l, r) -> Lt(<to-lua> l, <to-lua> r)
	to-lua: BOp(LTE(), l, r) -> Lte(<to-lua> l, <to-lua> r)
	to-lua: BOp(GT(), l, r) -> Gt(<to-lua> l, <to-lua> r)
	to-lua: BOp(GTE(), l, r) -> Gte(<to-lua> l, <to-lua> r)
	to-lua: BOp(AND(), l, r) -> And(<to-lua> l, <to-lua> r)
	to-lua: BOp(OR(), l, r) -> Or(<to-lua> l, <to-lua> r)
	to-lua: Concat(l, r) -> Concat(<to-lua> l, <to-lua> r)
	to-lua: Not(exp) -> Not(<to-lua> exp)
	to-lua: Umin(exp) -> Umin(<to-lua> exp)
	to-lua: PreDec(exp) -> Sub(<to-lua> exp, Number(1))
	to-lua: PostDec(exp) -> Sub(<to-lua> exp, Number(1)) // TODO: Proper post decrement
	to-lua: Expression(PreDec(exp)) -> Assignment([exp'], [Sub(exp', Number(1))])
		where exp' := <to-lua> exp
	to-lua: Expression(PostDec(exp)) -> Assignment([exp'], [Sub(exp', Number(1))])
		where exp' := <to-lua> exp
	to-lua: PreInc(exp) -> Add(<to-lua> exp, Number(1))
	to-lua: PostInc(exp) -> Add(<to-lua> exp, Number(1)) // TODO: Proper post inc
	to-lua: Expression(PreInc(exp)) -> Assignment([exp'], [Add(exp', Number(1))])
		where exp' := <to-lua> exp
	to-lua: Expression(PostInc(exp)) -> Assignment([exp'], [Add(exp', Number(1))])
		where exp' := <to-lua> exp
	
rules // Statements
	
	to-lua: Expression(exp) -> <to-lua> exp
		where not (<?PreDec(_)> exp <+ <?PostDec(_)> exp <+ <?PreInc(_)> exp <+ <?PostInc(_)> exp)
	to-lua: Statements(statements) -> <map(to-lua)> statements
	to-lua: If(condition, statements) -> If(<to-lua> condition, Chunk([<to-lua> statements]))
	to-lua: If(condition, trueStatements, falseStatements) -> If(<to-lua> condition, Chunk([<to-lua> trueStatements]), Chunk([<to-lua> falseStatements]))
	to-lua: While(condition, statements) -> While(<to-lua> condition, Chunk(<map(to-lua)> statements))
	to-lua: Assign(exp, val) -> Assignment([<to-lua> exp], [<to-lua> val])
		where not (<?ObjectNew(_, _)> val)
	new-object-to-lua(|objectName): ObjectNew(ObjectRef(name), props) -> <concat> [
			[
				Assignment([VarRef(objectName)], [Call(VarRef("ObjectManager"), "CreateLocalObject", Args([String(objectName)]))]),
				<component-to-lua(|objectName)> ComponentDef(""{luaScriptName}, CustomType("LuaObjectScript"), [
					ComponentProp(CustomType("LuaObjectScript"), "ClientScriptFile", StrConst($[gen/[name].lua])),
					ComponentProp(CustomType("LuaObjectScript"), "ClientSecurityLevel", StrConst("Low"))
				])
			],
			<map(propassign-to-lua(|objectName))> props,
			<new-object-to-lua-replace(|luaScriptName, objectName)>
		]
		where luaScriptName := $[[objectName]__LuaObjectScript]
	new-object-to-lua-replace(|luaScriptName, objectName): _ -> []
		where <?True()> <LuaScriptReplace>
	new-object-to-lua-replace(|luaScriptName, objectName): _ -> 
		[
			Call(VarRef(luaScriptName), "CreateEnv", Args([])),
			Call(VarRef(luaScriptName), "ReplaceVarWithThisEnv", Args([Access(VarRef("Script"), "ClientEnvironmentName"), String(objectName)]))
		]
		where not (<?True()> <LuaScriptReplace>)
	to-lua: Expression(n@ObjectNew(ObjectRef(name), _)) -> <new-object-to-lua(|$[__[<newname> name]])> n
	to-lua: VarDef(_, _{varName}, _, n@ObjectNew(_, _)) -> <new-object-to-lua(|varName)> n
	to-lua: PropDef(_, varName, _, n@ObjectNew(_, _)) -> <new-object-to-lua(|varName)> n
	to-lua: Assign(VarRef(_{varName}), n@ObjectNew(_, _)) -> <new-object-to-lua(|varName)> n  
	to-lua: StateChange(StateRef(name)) -> [exitCall, change, enterCall]
		where exitCall := Call(TableVarRef(VarRef("_G"), Concat(String("StateExit_"), <lua-stateref>)), Args([]))
		where change := Assignment([<lua-stateref>], [String(name)])
		where enterCall := Call(VarRef($[StateEnter_[name]]), Args([]))
	to-lua: Switch(exp, []) -> []
	to-lua: Switch(exp, [Case(cond, statement)|[]]) -> 
		If(Eq(<to-lua> exp, <to-lua> cond), Chunk(<to-lua> statement))
	to-lua: Switch(exp, [Case(cond, statement)|cases]) -> 
		IfElseIf(Eq(<to-lua> exp, <to-lua> cond), Chunk(<to-lua> statement), <map(to-lua(|exp))> cases)
	to-lua(|exp): Case(cond, statement) -> ElseIfPart(Eq(<to-lua> exp, <to-lua> cond), Chunk(<to-lua> statement)) 
	// TODO: delayed statements
	to-lua: Delay(time, timeUnit, statements) -> <map(to-lua)> statements
	// TODO: interpolation
	to-lua: Interpolation(exp, interpType, fromValue, toValue, time, timeUnit) -> Assignment([<to-lua> exp], [<to-lua> toValue])
	to-lua: Print(exp) -> Call(VarRef("print"), Args([<to-lua> exp]))
	
rules // Other
	
	to-lua: Param(_{name}) -> name
	to-lua: Param(_{name}, _) -> name
	