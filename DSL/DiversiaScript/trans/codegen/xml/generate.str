module codegen/xml/generate

imports
	
	include/DiversiaScript
	
	signatures
	
	projection/name
	projection/type
	projection/constant
	
	data/type-prop
	data/enum
	
	codegen/xml/simplexml
	
	util

strategies
	
	/**
	 * Converts simple XML AST to a string.
	 */
	game-xml-tostring = print-xml
	/**
	 * Writes simple XML AST to a file.
	 */
	game-xml-tofile(|path): ast -> ast
		where dir := <abspath> $[[<dirname> path]/]
		where <debug> $[Writing game xml file to [dir]Game.xml]
		where <fclose> <fputs> ( <game-xml-tostring> ast, <fopen> ( $[[dir]Game.xml], "w" ) )

rules // Structure
	
	to-game-xml: Start(_, pluginDefs, objectDefs, _) ->
		XMLNode("ClientPluginManager", [XMLNode("Plugins", <concat> [
			<map(to-game-xml)> pluginDefs,
			[XMLNode("item", [
				XMLElement("key", "ObjectTemplateManager"), 
				XMLNode("value", [XMLNode("ObjectTemplates", <map(to-game-xml)> objectDefs)])
			])]
		])])
			
rules // Plugins
			
	to-game-xml: PluginDef(name, type, properties) ->
		XMLNode("item", [XMLElement("key", name), XMLNode("value", <map(to-game-xml)> properties)])
	
	to-game-xml: PluginProp(_, prop, exp) -> <prop-to-game-xml> (prop, exp)
	
rules // Object definitions (object templates)
	
	to-game-xml: ObjectDef(name, propAssigns, _, componentDefs, _, _, _, _) ->
		XMLNode("item", [XMLElement("key", name), XMLNode("value", <concat> [
			<map(to-game-xml)> <filter(?BuiltinObjectProp(_, _))> propAssigns,
			[
				XMLElement("DisplayName", name),
				XMLElement("NetworkingType", "Local"),
				XMLNode("ComponentTemplates", <map(to-game-xml)> componentDefs)
			]
		])])
		
	to-game-xml: BuiltinObjectProp(prop, exp) -> <prop-to-game-xml> (prop, exp)
	
rules // Components (component templates)
	
	to-game-xml: ComponentDef(_{name}, type, properties) -> XMLNode("item", [
		XMLNode("key", [XMLElement("Type", <builtin-enum-value(|ComponentType())> type), XMLElement("Name", name)]),
		XMLNode("value", [XMLNode("Properties", <map(to-game-xml)> properties)])
	])
		
	to-game-xml: ComponentProp(_, prop, exp) -> XMLNode("item", [
		XMLElement("key", <crush> prop),
		XMLNode("value", [<prop-to-game-xml-typeinfo> (prop, exp)])
	])
		
rules // Properties
		
	prop-to-game-xml: (prop, exp) -> 
		XMLElement(<crush> prop, <to-game-xml> exp)
			where type := <type-of> exp
			where <is-standard-type> type <+ <is-builtin-enum> type
	prop-to-game-xml: (prop, exp) -> 
		XMLNode(<crush> prop, <to-game-xml> exp)
			where type := <type-of> exp
			where not (<is-standard-type> type <+ <is-builtin-enum> type)
			
	prop-to-game-xml-typeinfo: (prop, exp) -> <to-game-xml-typeinfo> exp
		
rules // Expressions (no type info)
		
	to-game-xml: True() -> 1
	to-game-xml: False() -> 0
	to-game-xml: IntConst(num) -> num
	to-game-xml: FloatConst(num) -> num
	to-game-xml: StrConst(string) -> string'
		where string' := <un-double-quote> string
	to-game-xml: StrConst(string) -> string
		where not (<un-double-quote> string)
	to-game-xml: Vector2Const(exp1, exp2) -> 
		<to-game-xml> New(Vector2(), [exp1, exp2])
	to-game-xml: Vector3Const(exp1, exp2, exp3) -> 
		<to-game-xml> New(Vector3(), [exp1, exp2, exp3])
	to-game-xml: Vector4Const(exp1, exp2, exp3, exp4) -> 
		<to-game-xml> New(Vector4(), [exp1, exp2, exp3, exp4])
	to-game-xml: EnumValueRef(enum, value) -> <builtin-enum-value(|enum)> value
	to-game-xml: New(type, params) -> 
		<zip(\ (name, value) -> XMLElement(name, value) \)> (propertyNames, values)
			where values := <map(to-game-xml)> params
			where (propertyNames, _) := <split-at(|<length> values)> <map(get-name)> <filter(?Property(_, _, True()))> <builtin-type-props> type
			
rules // Expressions (with type info)
		
	to-game-xml-typeinfo: exp@True() -> XMLElement("bool", <to-game-xml> exp)
	to-game-xml-typeinfo: exp@False() -> XMLElement("bool", <to-game-xml> exp)
	to-game-xml-typeinfo: exp@IntConst(num) -> XMLElement("int", <to-game-xml> exp)
	to-game-xml-typeinfo: exp@FloatConst(num) -> XMLElement("real", <to-game-xml> exp)
	to-game-xml-typeinfo: exp@StrConst(string) -> XMLElement("string", <to-game-xml> exp)
		where string' := <un-double-quote> string
	to-game-xml-typeinfo: exp@StrConst(string) -> XMLElement("string", <to-game-xml> exp)
		where not (<un-double-quote> string)
	to-game-xml-typeinfo: Vector2Const(exp1, exp2) -> 
		<to-game-xml-typeinfo> New(Vector2(), [exp1, exp2])
	to-game-xml-typeinfo: Vector3Const(exp1, exp2, exp3) -> 
		<to-game-xml-typeinfo> New(Vector3(), [exp1, exp2, exp3])
	to-game-xml-typeinfo: Vector4Const(exp1, exp2, exp3, exp4) -> 
		<to-game-xml-typeinfo> New(Vector4(), [exp1, exp2, exp3, exp4])
	to-game-xml-typeinfo: exp@EnumValueRef(enum, value) -> 
		XMLNode("enum", [XMLElement(<crush> enum, <to-game-xml> exp)])
	to-game-xml-typeinfo: exp@New(type, params) -> 
		XMLNode("object", [XMLNode(<crush> type, <to-game-xml> exp)])